:PROPERTIES:
:ID:       f8402af0-3fad-4357-9870-31db99a09462
:ROAM_REFS: https://byorgey.github.io/blog/posts/2024/11/27/stacks-queues.html
:END:
#+title: (byorgey.github.io) blog :: Brent -> [String] - Competitive Programming in Haskell: stacks, queues, and monoidal sliding windows
#+filetags: :computer_science:programming:haskell_lang:blog_post:website:

#+begin_quote
  * Competitive Programming in Haskell: stacks, queues, and monoidal sliding windows

  Posted on November 27, 2024
  Tagged [[https://byorgey.github.io/blog/tag/challenge.html][challenge]], [[https://byorgey.github.io/blog/tag/Kattis.html][Kattis]], [[https://byorgey.github.io/blog/tag/stack.html][stack]], [[https://byorgey.github.io/blog/tag/queue.html][queue]], [[https://byorgey.github.io/blog/tag/sliding%20window.html][sliding window]], [[https://byorgey.github.io/blog/tag/monoid.html][monoid]]

  Suppose we have a list of items of length (n), and we want to consider /windows/ (/i.e./ contiguous subsequences) of width (w) within the list.

  We can compute the /sum/ of each window by brute force in (O(nw)) time, by simply generating the list of all the windows and then summing each.  But, of course, we can do better: keep track of the sum of the current window; every time we slide the window one element to the right we can add the new element that enters the window on the right and subtract the element that falls of the window to the left.  Using this “sliding window” technique, we can compute the sum of every window in only (O(n)) total time instead of (O(nw)).

  How about finding the /maximum/ of every window?  Of course the brute force (O(nw)) algorithm still works, but doing it in only (O(n)) is considerably trickier!  We can't use the same trick as we did for sums since there's no way to “subtract” the element falling off the left.  This really comes down to the fact that addition forms a /group/ (/i.e./ a monoid-with-inverses), but =max= does not.  So more generally, the question is: how can we compute a /monoidal/ summary for every window in only (O(n)) time?

  Today I want to show you how to solve this problem using one of my favorite competitive programming tricks, which fits beautifully in a functional context.  Along the way we'll also see how to implement simple yet efficient functional queues.
#+end_quote
