:PROPERTIES:
:ID:       08e14c51-227a-4d6c-ab9f-a6b0bdc993e3
:ROAM_REFS: https://en.wikipedia.org/wiki/Abstract_data_type
:END:
#+title: (en.wikipedia.org) Abstract data type - Wikipedia
#+filetags: :website:

#+begin_quote
  In [[https://en.wikipedia.org/wiki/Computer_science][computer science]], an *abstract data type* (*ADT*) is a [[https://en.wikipedia.org/wiki/Mathematical_model][mathematical model]] for [[https://en.wikipedia.org/wiki/Data_type][data types]], defined by its behavior ([[https://en.wikipedia.org/wiki/Semantics_(computer_science)][semantics]]) from the point of view of a /[[https://en.wikipedia.org/wiki/User_(computing)][user]]/ of the data, specifically in terms of possible values, possible operations on data of this type, and the behavior of these operations.  This mathematical model contrasts with /[[https://en.wikipedia.org/wiki/Data_structure][data structures]]/, which are concrete representations of data, and are the point of view of an implementer, not a user.  For example, a [[https://en.wikipedia.org/wiki/Stack_(abstract_data_type)][stack]] has push/pop operations that follow a Last-In-First-Out rule, and can be concretely implemented using either a list or an array.  Another example is a [[https://en.wikipedia.org/wiki/Set_(abstract_data_type)][set]] which stores values, without any particular [[https://en.wikipedia.org/wiki/Sequence][order]], and no repeated values.  Values themselves are not retrieved from sets; rather, one tests a value for membership to obtain a Boolean "in" or "not in".

  ADTs are a theoretical concept, used in formal [[https://en.wikipedia.org/wiki/Semantics_(computer_science)][semantics]] and program [[https://en.wikipedia.org/wiki/Formal_verification][verification]] and, less strictly, in the design and analysis of [[https://en.wikipedia.org/wiki/Algorithm][algorithms]], [[https://en.wikipedia.org/wiki/Data_structure][data structures]], and [[https://en.wikipedia.org/wiki/Software_system][software systems]].  Most mainstream computer languages do not directly support formally specifying ADTs.  However, various language features correspond to certain aspects of implementing ADTs, and are easily confused with ADTs proper; these include [[https://en.wikipedia.org/wiki/Abstract_type][abstract types]], [[https://en.wikipedia.org/wiki/Opaque_data_type][opaque data types]], [[https://en.wikipedia.org/wiki/Protocol_(object-oriented_programming)][protocols]], and [[https://en.wikipedia.org/wiki/Design_by_contract][design by contract]].  For example, in [[https://en.wikipedia.org/wiki/Modular_programming][modular programming]], the module declares procedures that correspond to the ADT operations, often with [[https://en.wikipedia.org/wiki/Comment_(computer_programming)][comments]] that describe the constraints.  This [[https://en.wikipedia.org/wiki/Information_hiding][information hiding]] strategy allows the implementation of the module to be changed without disturbing the [[https://en.wikipedia.org/wiki/Client_(computing)][client]] programs, but the module only informally defines an ADT.  The notion of abstract data types is related to the concept of [[https://en.wikipedia.org/wiki/Data_abstraction][data abstraction]], important in [[https://en.wikipedia.org/wiki/Object-oriented_programming_language][object-oriented programming]] and design by contract methodologies for [[https://en.wikipedia.org/wiki/Software_engineering][software engineering]].
#+end_quote
