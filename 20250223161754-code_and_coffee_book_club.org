:PROPERTIES:
:ID:       2a07e4ea-610b-4c9a-bb84-d961fb2450e5
:END:
#+title: Code and Coffee Book Club
#+filetags: :events:social:

The official book club of [[id:c2a1e83d-86c0-46bd-bd71-7b604420d3d0][Code and Coffee Long Beach]].

Hosted online on the Code and Coffee [[id:d2412b09-9507-42f7-a674-512b4c18b680][Discord server]], livestreamed to [[id:6735a31a-80b1-41ff-bddd-9d2dc6e50f14][twitch]], and uploaded to [[id:35ce0229-5235-486f-9384-674649c9c180][YouTube]].
* Books
** [[id:bc4f5e4a-5bb9-47f7-8086-d12236fe793f][Structure and Interpretation of Computer Programs]]
*** Sessions
**** Session Zero, [2025-02-23 Sun 15:00-16:00]
:PROPERTIES:
:ID:       3bdab7d2-9dfa-477a-851b-7e8e52aa51b5
:END:
***** Linked in Twitch Chat
****** [[id:1114dfc3-8db9-4389-9d27-4b586a719f17][(linkencore.iii.com) Encore -- Structure and interpretation of computer programs / Harold Abelson and Gerald Jay Sussman ; adapted to JavaScript by Martin Henz and Tobias Wrigstad with Julie Sussman.]]
****** [[id:cb5f7acd-22bb-48f7-9ffa-034b058726d1][(sourceacademy.org) Source Academy]]
****** [[id:1256f4d8-25aa-4d39-a1bd-da6272adedae][(shaunlebron.github.io) Parinfer - simpler Lisp editing]]
****** [[id:d8a6cfff-6757-42db-8850-8830dedcd067][(linkencore.iii.com) Encore -- An elementary introduction to the Wolfram language / Stephen Wolfram.]]
****** [[id:93b26e85-6889-4277-9ee5-6c918477a6df][(www.wolfram.com) An Elementary Introduction to the Wolfram Language by Stephen Wolfram]]
****** [[id:bb915ed7-065b-4c58-8124-a39adec7cac0][(www.industriallogic.com) Knowledge Hydrant: A Pattern Language for Study Groups - khdraft.pdf]]
****** [[id:0f83331c-9e15-4622-8041-320b890e821b][(linkencore.iii.com) Encore -- Structure and interpretation of computer programs / Harold Abelson and Gerald Jay Sussman, with Julie Sussman ; foreword by Alan J. Perlis.]]
****** [[id:22349593-c7e7-430e-8858-1b066f0d4b6e][(journal.stuffwithstuff.com) JavaScript Isn’t Scheme – journal.stuffwithstuff.com]]
****** [[id:f82bd36c-04e2-485f-8f99-2f742000031d][(news.ycombinator.com) JavaScript Isn't Scheme | Hacker News]]
***** (www.meetup.com) Code and Coffee Book Club, Sun, Feb 23, 2025, 3:00 PM | Meetup :events:website:
:PROPERTIES:
:ID:       e1e4b40e-71a2-4e7b-9d0f-a5f3116f0922
:ROAM_REFS: https://www.meetup.com/code-and-coffee-long-beach/events/306193274/
:END:

#+begin_quote
  * Code and Coffee Book Club

  Hosted By Ryan W.

  ** Details

  The focus is on technical books, especially ones considered classical computer science texts.

  Current book: Structure and Interpretation of Computer Programs, second edition.

  This first session will be an introduction to the book club, an overview of the first book, covering the preface of the book, and deciding how much material to cover in the next session.  The second session will dive into the body of the book.

  The book club will be held online in the Code && Coffee Discord server in a voice channel and will be streamed online on the Code && Coffee Twitch channel.  As always, every one is welcome to participate in their choice of text, voice, or video chat.

  Tags: Book Club, Learning, Lisp, Programming Languages, Computer Programming
#+end_quote
****** Links from Comments
******* [[id:40abe704-c648-4281-b4a0-5fbab64c5775][(mitp-content-server.mit.edu) Welcome to the SICP Web Site]]
******* [[id:790316b8-3c04-40a2-b0ef-fda647f907c7][(github.com) sarabander/sicp: HTML5/EPUB3 version of SICP]]
******* [[id:ea6fa692-2340-4347-9b73-94a72aaddbfd][(ocw.mit.edu) Structure and Interpretation of Computer Programs | Electrical Engineering and Computer Science | MIT OpenCourseWare]]
******* [[id:e41230b4-3dee-4a59-aefa-712ca2229e4e][(www.youtube.com) MIT 6.001 Structure and Interpretation, 1986 - YouTube]]
******* [[id:6735a31a-80b1-41ff-bddd-9d2dc6e50f14][(www.twitch.tv) CodeAndCoffeeLB - Twitch]]
******* [[id:82dac0a3-1609-43d4-ae80-1433e32ddfbb][(www.racket-lang.org) Racket]]
******** [[id:6525fb29-4aa1-4c0a-8fd2-d5024a3ae869][(docs.racket-lang.org) SICP Collections]]
******* [[id:87a77034-fae3-406c-9479-cda62e765e76][(mitpress.mit.edu) Structure and Interpretation of Computer Programs]]
******* [[id:a183f1e8-866d-4586-b5f9-a6a37a0e467a][(sicpebook.wordpress.com) Structure and Interpretation of Computer Programs (SICP) by Abelson & Sussman – SICP]]
******* [[id:18a1ad86-a00c-437a-b253-ba0d24299574][(www.scheme.org) The Scheme Programming Language]]
******* [[id:7baffabc-9c70-4bb9-b719-3519f7eb68b0][(try.scheme.org)]]
******* [[id:0f83331c-9e15-4622-8041-320b890e821b][(linkencore.iii.com) Encore -- Structure and interpretation of computer programs / Harold Abelson and Gerald Jay Sussman, with Julie Sussman ; foreword by Alan J. Perlis.]]
******* [[id:22349593-c7e7-430e-8858-1b066f0d4b6e][(journal.stuffwithstuff.com) JavaScript Isn’t Scheme – journal.stuffwithstuff.com]]
******* [[id:f82bd36c-04e2-485f-8f99-2f742000031d][(news.ycombinator.com) JavaScript Isn't Scheme | Hacker News]]
******** [[id:54bc44dd-5e3d-42eb-80ac-df3ef2a005df][(news.ycombinator.com) JavaScript Isn't Scheme (2013) | Hacker News]]
******* [[id:36cc076e-e5dd-435d-ac6a-f1a9fa4b04b0][(people.eecs.berkeley.edu) Simply Scheme: Introducing Computer Science]]
******* [[id:c07d6ee3-5a5d-4bae-ba41-e72989c8ba86][(mitpress.mit.edu) The Little Schemer]]
******* [[id:3cbd9c3a-e06d-4655-ba41-ccabde8d0389][(mitpress.mit.edu) The Reasoned Schemer]]
******* [[id:eeb73809-21fb-4cc9-97b0-f52d726ef058][(htdp.org) How to Design Programs]]
******* [[id:d8258db6-97b3-4459-999c-560fd8830965][(webperso.info.ucl.ac.be) Concepts, Techniques, and Models of Computer Programming]]
******* [[id:10207667-9bc2-4b0f-b359-9c85178a2d5d][(mitpress.mit.edu) The Seasoned Schemer]]
******* [[id:e3359747-2369-4f60-87ef-0bd9afed406e][(beautifulracket.com) Beautiful Racket by Matthew Butterick]]
******* [[id:1256f4d8-25aa-4d39-a1bd-da6272adedae][(shaunlebron.github.io) Parinfer - simpler Lisp editing]]
******* [[id:fa9ee46b-81b9-4c6f-a784-f0cca7d74256][(paredit.org) paredit — parenthetical editing in Emacs]]
***** Links from Discord
****** [[id:ebad0914-e115-4476-91f5-32a6083dfaab][(github.com) source-academy/sicp: XML sources of SICP and SICP JS, and support for generating Interactive SICP JS, PDF, e-book and comparison editions]]
****** [[id:ce46e60f-b522-406f-a2a8-85cf65312d8a][(sicp.sourceacademy.org) Structure and Interpretation of Computer Programs JavaScript Edition (sicpjs.pdf)]]
****** [[id:f507a8ed-b2e1-445e-8d9c-514ea1307aea][(en.wikipedia.org) Higher-order function - Wikipedia]]
****** [[id:84edb9cd-8f7b-4ae7-8a93-1f9f70c70608][(www.gnu.org) Symbols (GNU Emacs Lisp Reference Manual)]]
****** [[id:5edf24bc-eeaa-465f-b90f-8565edbb600b][(en.wikipedia.org) Curry–Howard correspondence - Wikipedia]]
****** [[id:5503edd7-c9b7-4428-a2ec-bf05a61a8ed7][(writings.stephenwolfram.com) Combinators and the Story of Computation—Stephen Wolfram Writings]]
***** [[id:130c4aa4-c318-4a59-904f-e9ebc429c18c][(physbuzz.github.io) 02-23-2025.md]]
**** Session 1, [2025-03-02 Sun 15:00-16:00]
***** Current section [[id:b85b9acb-443c-4d3f-842b-1f663c99ef18][(sarabander.github.io) Structure and Interpretation of Computer Programs, 2e: 1.1]]
***** [[id:250b2e70-00fa-426e-b8b2-730ee1d4b960][(physbuzz.github.io) notes-ch1-1.md]]
***** [[id:5edf24bc-eeaa-465f-b90f-8565edbb600b][(en.wikipedia.org) Curry–Howard correspondence - Wikipedia]]
***** [[id:5509c95a-ba92-4a76-ae77-5c3a2b1368ba][(en.wikipedia.org) Fixed-point combinator - Wikipedia]]
**** Session 2, [2025-03-16 Sun 15:00-16:25]
***** Current section [[id:d4e8ce6b-05bb-4338-b3ff-1bb12c109dea][(sarabander.github.io) Structure and Interpretation of Computer Programs, 2e: 1.2]]
***** [[id:51594a7b-3ca6-4bc2-a5fc-b983660cb475][(physbuzz.github.io) notes-ch1-2.md]]
***** [[id:aa79adc9-3e6a-4056-9bd8-6fe00a1ccf12][(en.wikipedia.org) Extended Euclidean algorithm - Wikipedia]]
***** [[id:48a3942c-c963-49a0-aa59-b23231eab7f8][(en.wikipedia.org) Chinese remainder theorem - Wikipedia]]
***** [[id:46f082ae-40c1-4621-94cc-bc78cb823859][(en.wikipedia.org) Linear Diophantine equations - Diophantine equation - Wikipedia]]
***** [[id:21a8b700-fb6b-4e90-9f17-267f7f4ba53d][(en.wikipedia.org) Big O notation - Wikipedia]]
***** [[id:02954d3b-35db-4d34-b504-b110ec7257a5][(books.google.com) How to Prove It: A Structured Approach - Daniel J. Velleman - Google Books]]
***** [[id:b60d88a6-5396-4183-ad7d-74919d13a39b][(nature-of-computation.org) The Nature Of Computation]]
***** [[id:165d540b-70bf-4646-a817-0c5f8c920fa9][(www.cambridge.org) Computational Complexity]]
***** [[id:dbdd9131-2ccd-4a7d-a780-2ebd2aceed8c][(www.amazon.com) The Computational Beauty of Nature: Computer Explorations of Fractals, Chaos, Complex Systems, and Adaptation: Flake, Gary William: 9780262561273: Amazon.com: Books]]
***** [[id:dd2f4b13-7fd9-4dda-9445-bbf7a61e65d0][(mathstodon.xyz) Simone Conradi: "The absolute value of a soluti…" - Mathstodon]]
***** [[id:82c9cfe8-eb0d-4340-8592-373c3581c0dd][(en.wikipedia.org) Lie algebra - Wikipedia]]
***** [[id:9f49f590-90a1-4cca-9da0-d5bf922c2d3f][(en.wikipedia.org) Quaternion - Wikipedia]]
***** [[id:0cd682ff-d2c0-4ee9-af88-5729e0e89c1c][(lockywolf.wordpress.com) Solving SICP – Various Thoughts]]
***** [[id:6a1c8f81-f34c-46ca-9865-ed082b968d0b][(news.ycombinator.com) Solving SICP | Hacker News]]
***** [[id:f813f14e-fa7e-4fdf-bf91-73debeaa4ce9][(longformmath.com) Long(er)-Form Mathematics – LFM Textbooks]]
***** [[id:dfb9719d-6ed3-46ed-ae2e-50ba87e0eca2][(projecteuler.net) About - Project Euler]]
***** [[id:8a6e02d9-17df-407d-9cb8-4b0306852fe3][(en.wikipedia.org) Cryptographic nonce - Wikipedia]]
***** [[id:9d37a76d-1b42-46d2-87da-13d0905b7c99][(tvtropes.org) Noodle Incident - TV Tropes]]
***** [[id:5544c0de-0f34-4f09-bb32-8db365901a12][(hn.algolia.com) "random number generator" All | Search powered by Algolia]]
***** [[id:2240b046-b115-42f9-b036-e70df07c1a5a][(www.valerionappi.it) Generating true random numbers from bananas - Valerio Nappi]]
***** [[id:87a1a554-a120-484e-a014-80f3135627a7][(en.wikipedia.org) Introduction to Algorithms - Wikipedia]]
****** [[id:11438879-fe1a-4e45-b25b-3a7563627422][Ronald L. Rivest]]
******* [[id:7cf931f8-5095-4473-8010-b94ed35b914d][Adi Shamir]]
******* [[id:6edcb9e7-8f35-4796-854c-b216873ee148][Leonard M. Adleman]]
**** Session 3, [2025-03-23 Sun 15:00-16:00]
***** Current section [[id:10ed2665-130f-4398-8efa-ce9795584da0][(sarabander.github.io) Structure and Interpretation of Computer Programs, 2e: 1.3]]
***** Next: [[id:4e6b6934-89b2-4125-b046-9628e20427e8][SICP Chapter 2 (intro)]] and [[id:6d5c6805-fb40-49d9-9a91-93733bde2818][SICP Section 2.1]]
***** Java's usage of the word "body" was brought up
SICP does use "Body", in the same sense.  In addition, according to [[id:caf4759c-81d6-479b-b677-c88b65dd636f][Wikipedia]], the book predates Java by around 11 years.
***** Closures were discussed
The book sticks to the mathematical definition, see [[id:2edf6633-4e65-4ebd-81c3-a842cb759479][(sarabander.github.io) Structure and Interpretation of Computer Programs, 2e: 2.2]], and not the definition commonly used by [[id:84ae6e85-a6a2-4133-bc53-274238081c2d][Lisp]] and [[id:db0939e6-0c2e-4bb0-a626-2114209235af][JavaScript]] programmers.
***** [[id:91f6ff47-2dcb-444f-bd32-79151a4e1f22][(pythontutor.com) Python Tutor - Python Online Compiler with Visual AI Help]]
Was mentioned in passing, in regard to the substitution model of execution.  See also [[https://sarabander.github.io/sicp/html/1_002e1.xhtml#g_t1_002e1_002e5][SICP2e 1.1.5: The Substitution Model for Procedure Application]].
***** [[id:032ff6ce-e694-4d1a-b575-3dc4512f09b7][(en.wikipedia.org) Wolfram Language - Wikipedia]]
Similarities to the [[id:3e3a70b9-48ef-470a-bb79-03acaea29f1e][Wolfram Language]] were brought up.
***** A comparison was made between higher-order functions in [[id:c46eea5e-e2d2-4a21-bafe-74b6751292d2][C]] vs [[id:84ae6e85-a6a2-4133-bc53-274238081c2d][Lisp]]
An example of C using function-pointers was given of [[id:d163e4fb-477a-459c-819f-598012df912c][=qsort=]].  Higher-order functions are more powerful in Lisp due to the ability to programmatically define new functions at runtime based on program input.
***** [[id:73f4a605-b675-4a9d-923f-2fa379a89bac][(www.youtube.com) Mathematical Physics 01 - Carl Bender - YouTube]]
***** [[id:45d86aec-1cbf-4562-b350-6787585091e7][(sarabander.github.io) SICP, 2e: 3.2 The Environment Model of Evaluation]]
A comparison was made between the substitution model of application (see [[https://sarabander.github.io/sicp/html/1_002e1.xhtml#g_t1_002e1_002e5][SICP2e 1.1.5: The Substitution Model for Procedure Application]]) and the environment model of evaluation.
***** [[id:94023478-7ef7-4451-9564-02b356a81102][LISP 1.5 Programmer's Manual]]
***** [[id:9e65a3cb-c744-465e-b45d-c9494fddb701][(jmc.stanford.edu) History of Lisp]]
****** [[id:2cd55918-ce21-4dbb-9eb3-df648603c7ad][(jmc.stanford.edu) lisp.pdf]]
***** [[id:be8b671a-2bb0-4e85-8116-70e1ace8641c][Recursive functions of symbolic expressions and their computation by machine, Part I by John McCarthy]]
***** [[id:8e828444-d654-43f9-8430-1314204ced46][(texdraft.github.io) Lisp Compiler]]
***** [[id:b1f61a9c-1636-428c-b087-9bd5466253ad][(en.wikipedia.org) SHRDLU - Wikipedia]]
***** [[id:e86b5f48-7ae0-4cfe-a07b-4f1a2e59af5a][Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp by Peter Norvig]]
***** [[id:0d07302d-fb8a-4fd8-a795-5ee911adbf9c][(en.wikipedia.org) Cyc - Wikipedia]]
***** [[id:f1ccd506-3a34-48b8-aa11-2e3cbf6dde42][(www.wired.com) One Genius' Lonely Crusade to Teach a Computer Common Sense | WIRED]]
***** [[id:f07d1118-83d6-428f-beb8-081d6966f661][(www.wired.com) CYC-O | WIRED]]
***** [[id:760b78b3-1c9a-44a2-b0cf-d2ad0381dc79][IBM 704]]
**** Session 4, [2025-03-30 Sun 15:00-16:00]
***** Current chapter [[id:4e6b6934-89b2-4125-b046-9628e20427e8][(sarabander.github.io) SICP, 2e: Chapter 2 Building Abstractions with Data]]
***** Current section [[id:6d5c6805-fb40-49d9-9a91-93733bde2818][(sarabander.github.io) SICP, 2e: 2.1 Introduction to Data Abstraction]]
***** [[id:54ca1727-d685-4343-a0e3-3f07a815ea58][(sarabander.github.io) SICP, 2e: References]]
***** [[id:c49d3fa4-05a0-4df8-9edd-fbb28a98f9a3][(en.wikipedia.org) Hindley–Milner type system - Wikipedia]]
***** [[id:1ed495bd-4fa7-4386-820e-da7d8fa037fe][(en.wikipedia.org) Halting problem - Wikipedia]]
***** [[id:51ed60d6-72ac-421b-b7db-e0faab9f86cf][(en.wikipedia.org) Rice's theorem - Wikipedia]]
***** [[id:5dfe39dc-7d6c-47b9-ae2c-23e72e78ac2c][(en.wikipedia.org) Rice–Shapiro theorem - Wikipedia]]
***** [[id:269a61e7-1e3a-42f2-9749-cf15a6b20c3a][(en.wikipedia.org) Scott–Curry theorem - Wikipedia]]
***** [[id:a0860061-8e8d-4edc-9c47-f50c7aeeb168][(en.wikipedia.org) Haskell Curry - Wikipedia]]
***** [[id:5edf24bc-eeaa-465f-b90f-8565edbb600b][(en.wikipedia.org) Curry–Howard correspondence - Wikipedia]]
***** [[id:b60d88a6-5396-4183-ad7d-74919d13a39b][(nature-of-computation.org) The Nature Of Computation]]
***** [[id:84a83fd6-8983-49fa-8694-49a0ace2f4b0][(en.wikipedia.org) Mizar system - Wikipedia]]
***** [[id:266e410a-c16d-40b0-8c50-65e9df7efa26][(hbpms.blogspot.com) How to Become a Pure Mathematician (or Statistician)]]
***** [[id:305a0136-617f-4f2f-bd0b-d580e86c91ae][(en.wikipedia.org) Christos Papadimitriou - Publications - Wikipedia]]
***** [[id:113a0446-7ae1-4370-9c39-746e2295f877][(guix.gnu.org) GNU Guix transactional package manager and distribution — GNU Guix]]
***** [[id:5ae0698a-cef8-4068-8ec4-75dcfd9c83ea][(itch.io) Autumn Lisp Game Jam 2024 - itch.io]]
***** [[id:cd24e6d7-a28e-447d-a67f-94099f0c92b3][(www.youtube.com) Lambda Calculus: Introduction, Visualization, and Philosophy - YouTube]]
***** [[id:0922fa74-c7b0-44ea-a455-e5c3e6ce5971][(computationbook.com) Understanding Computation]]
***** [[id:8d68f948-3d87-4e39-a317-d174ab5c57a5][(web.archive.org) Lambda Diagrams]]
***** [[id:a17c4195-8144-4b01-9757-0733e1944e96][(en.wikipedia.org) To Mock a Mockingbird - Wikipedia]]
***** [[id:fe9d21d6-03f5-45be-9d34-87043416f808][Vimacs.app]]
***** [[id:7ea9bd38-5f1e-4d41-ae1c-563b16394205][(www.youtube.com) Self-Correcting Messages (Hamming Codes) - YouTube]]
***** [[id:4a08ee29-8b52-432f-b9ee-1e60f176011f][(www.youtube.com) Hamming Codes Part 2: The One-Line Implementation - YouTube]]
***** [[id:33292cf2-86a1-4693-b750-4f6ad96784a4][(press.stripe.com) Stripe Press — The Art of Doing Science and Engineering]]
***** [[id:5d8b7f8f-1b32-411b-a63f-628cfa0c4205][(hackernewsbooks.com) Hacker News Books]]
***** [[id:0a177b13-aecb-4f33-a45b-30b0b090614b][(www.oreilly.com) Designing Data-Intensive Applications, 2nd Edition[Book]​]]
***** Next time, [[id:183c1aa8-f3cb-4712-9a69-c218be056654][(sarabander.github.io) SICP, 2e: 2.2 Hierarchical Data and the Closure Property]]
**** Session 5, [2025-04-06 Sun 15:00-16:00]
***** Current section [[id:183c1aa8-f3cb-4712-9a69-c218be056654][(sarabander.github.io) SICP, 2e: 2.2 Hierarchical Data and the Closure Property]]
***** Examples of different Lisp structures using lists and cons cells
#+begin_src scheme
  ; Equivalent forms.
  (cons (list 1 2) (list 3 4))
  (cons (cons 1 (cons 2 nil)) (cons 3 (cons 4 nil)))

  ; Not equivalent to the former two forms.
  (list (list 1 2) (list 3 4))
#+end_src
***** [[id:82dac0a3-1609-43d4-ae80-1433e32ddfbb][(www.racket-lang.org) Racket]]
***** [[id:c8912c5d-d322-4a55-9541-e7df5f750b28][(sdf.org) SDF Public Access UNIX System - Free Shell Account and Shell Access]]
***** [[id:614d5dbe-cc84-406d-b4d8-eba7d8a66641][(physbuzz.github.io) notes-ch2-2.md]]
***** [[id:0ce8a637-9efa-436e-8b46-1a49b4d98f35][(linkencore.iii.com) Encore -- Functional design and architecture : examples in Haskell / Alexander Granin.]]
***** [[id:ccf03166-bdb6-4f78-90ae-e6f96696151f][(linkencore.iii.com) Encore -- Data-oriented programming : reduce software complexity / Yehonathan Sharvit ; forewords by Michael T. Nygard and Ryan Singer.]]
***** [[id:702f90d1-a9b0-4223-91ed-e92ed309d890][(www.amazon.com) Programming Algorithms in Lisp: Writing Efficient Programs with Examples in ANSI Common Lisp: Domkin, Vsevolod: 9781484264270: Amazon.com: Books]]
***** [[id:b4a1175c-cf6a-4de4-9d1a-2a338e46bd04][(www.amazon.com) Purely Functional Data Structures: Okasaki, Chris: 9780521663502: Amazon.com: Books]]
***** [[id:bb37502b-f9bf-48a9-b016-93f4ac3dfd84][(en.wikipedia.org) Matthias Felleisen - Wikipedia]]
***** [[id:40487582-bcbc-4e94-b8d7-f533a11a9313][(linkencore.iii.com) Encore -- The recursive book of recursion : ace the coding interview with Python and JavaScript / by Al Sweigart.]]
***** [[id:c9e9c3b6-d5c3-4d40-8c18-96afb274cbf6][(www.manning.com) Data-Oriented Programming]]
***** [[id:b1e828fb-6b65-4e6d-a6b4-aaea2b9e1740][(en.wikipedia.org) Tower of Hanoi - Wikipedia]]
***** [[id:e9c87192-3017-420b-94d7-7bcc1ff9ca41][(en.wikipedia.org) Eight queens puzzle - Wikipedia]]
***** [[id:734efbcc-68b3-4ffd-b8c2-5e607223aeb9][(mitpress.mit.edu) Structure and Interpretation of Classical Mechanics]]
****** [[id:82fb2c99-587e-4a6d-95a6-3472337c73d0][(mitp-content-server.mit.edu) Structure and Interpretation of Classical Mechanics]]
***** [[id:18cf776a-0540-4561-9e6d-03eef416fe2f][(www.amazon.com) Functional Differential Geometry (Mit Press): Sussman, Gerald Jay, Wisdom, Jack, Farr, Will: 9780262019347: Amazon.com: Books]]
***** [[id:77677999-a800-4b6f-aa71-81d6f65e3299][(nostarch.com) Learn Physics with Functional Programming | No Starch Press]]
***** [[id:c08a7cb1-2450-4a4a-8a2e-52ef1d331816][(nostarch.com) Hardcore Programming for Mechanical Engineers | No Starch Press]]
***** [[id:03937c91-d585-48a0-b8cf-208ac6c74b45][(stevelosh.com) August 2016 Lisp Game Jam Postmortem / Steve Losh]]
***** [[id:2f2bd676-b37a-4130-8e6b-cf11ae8b6f59][(rosettacode.org) Rosetta Code]]
***** [[id:dfbd1cf6-7a60-4177-bcc7-b32962208f15][(rosettacode.org) Category:Scheme - Rosetta Code]]
***** [[id:9b5f8541-85c4-4696-b9cb-dd719523d903][(www.manning.com) Grokking Functional Programming]]
***** [[id:2f8a5c51-c94f-492f-8049-458e7fadc4b5][(lispcookbook.github.io) Data structures]]
**** Study Session [2025-04-13 Sun 15:00-16:00]
Study session prior to §2.3 to allow more time to read and give extra time to discussing exercises.  Not streamed or recorded.  No host present.
**** Session 6, [2025-04-20 Sun 15:00-16:00]
Session recorded by an attendee, but not streamed.  No host present due to multiple schedule conflicts and last-minute obligations.
***** Current section [[id:e45e5e54-2625-4d00-9e48-0d1cb002d2e6][(sarabander.github.io) SICP, 2e: 2.3 Symbolic Data]]
**** Session 7, [2025-04-27 Sun 15:00-16:00]
***** Current section [[id:b66aedcd-6879-4a7f-856f-4de22a9a7bcd][(sarabander.github.io) SICP, 2e: 2.4 Multiple Representations for Abstract Data]]
***** Property lists
***** Association lists
***** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html][Association Lists (GNU Emacs Lisp Reference Manual)]]
***** [[id:b9d5b964-d6c1-42e8-bed4-aa25935407c1][(www.cs.cmu.edu) 10.1. The Property List]]
***** [[id:b4c9a914-2a36-47b3-b4c1-cf44c6f806cb][(www.cs.cmu.edu) 15.6. Association Lists]]
***** [[id:4c84542d-5577-4d96-b59e-e18334703f56][(en.wikipedia.org) History - Object-oriented programming - Wikipedia]]
***** [[id:34e4ecb5-ef41-42cf-af05-2c7231998105][(cs61a.org) CS 61A Spring 2025]]
****** [[id:0a5f3d1d-8e20-4616-8cdd-90f817b959a7][(www.composingprograms.com) Composing Programs]]
***** [[id:8f73a589-db3d-4bff-84b4-19ce6510dae8][(www.brinckerhoff.org) CSC 430, Spring 2025]]
***** [[id:85990d99-ed08-4b06-b981-9d9d3c10f4cb][(www.cliki.net) CLiki: Current recommended libraries]]
****** [[id:787339e7-fc9e-41d8-b385-0212b145bef6][(alexandria.common-lisp.dev) Alexandria]]
******* [[id:564037ee-32f0-4b22-8f01-c22b745938dc][(gitlab.common-lisp.net) alexandria / alexandria · GitLab]]
******** [[id:3d72803f-e192-4ee5-a39a-fa73fcf21e80][(gitlab.common-lisp.net) alexandria.asd · master · alexandria / alexandria · GitLab]]
******** [[https://gitlab.common-lisp.net/alexandria/alexandria/-/blob/master/alexandria-1/arrays.lisp][alexandria-1/arrays.lisp · master · alexandria / alexandria · GitLab]]
******** [[https://gitlab.common-lisp.net/alexandria/alexandria/-/blob/master/alexandria-2/arrays.lisp][alexandria-2/arrays.lisp · master · alexandria / alexandria · GitLab]]
****** [[id:28293466-114e-4c1a-95ae-47b6f6b121ca][(docs.racket-lang.org) raco: Racket Command-Line Tools]]
****** [[id:ce62aeae-38ab-49cf-ba22-47b43ec97cb2][Quicklisp]]
****** [[id:9af45692-b2f1-4d4e-a9b3-03d355ffacd0][Guix]]
******* [[https://packages.guix.gnu.org/search/?query=guile][Search — Packages — GNU Guix]]
******** [[https://packages.guix.gnu.org/packages/guile-lzma/0.1.1/][guile-lzma 0.1.1 — Packages — GNU Guix]]
********* [[https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/guile.scm#n990][Line 990, (define-public guile-lzma...) guile.scm\packages\gnu - guix.git - GNU Guix and GNU Guix System]]
****** [[id:f6311b42-cf2d-490f-ac69-0075b82828b9][(www.gnu.org) Top (Guile Reference Manual)]]
****** [[id:dbb51b6f-3fb9-4f25-b1aa-76909e5a30f6][(en.wikipedia.org) Stalin (Scheme implementation) - Wikipedia]]
****** [[id:064be3a0-bb32-4312-9868-73e9c77ba7cf][Guile]]
****** [[id:4dce9bd1-c2b5-47ce-aded-2811e4b1ca2e][(wingolog.org) wingolog]]
****** [[id:788ac70b-c61b-414b-88ed-5be4177fc565][ASDF]]
****** [[id:ac3dda9e-bf08-4cab-9390-bd0cad22a907][R^7RS Chapter 6 Section 4: Pairs and Lists]]
***** Other books mentioned
****** [[id:de46d019-dd0c-46a9-aac8-575c01946098][Software Design for Flexibility: How to Avoid Programming Yourself into a Corner]]
****** [[id:01a6fd50-c5a7-449d-a43b-d1e32441ea96][(thelittletyper.com) The Little Typer]]
****** [[id:b436fdf8-1290-484f-becf-c369142a0b80][Essentials of Programming Languages]]
****** [[id:79183f27-34a0-4541-a761-de494362b19c][The Art of the Metaobject Protocol]]
****** [[id:c2d9b1d2-004e-447c-aea6-c979572806d7][Concepts, Techniques, and Models of Computer Programming]]
**** Session 8, [2025-05-04 Sun 15:00-16:00]
***** Current section [[id:597e2dfe-3c20-4137-b005-390b5d614509][(sarabander.github.io) SICP, 2e: 2.5 Systems with Generic Operations]]
***** Native number types in Racket causing issues in implementing the examples in SICP
Racket has native fractions which messes with implementing some of the examples in SICP §2.5.
***** See also [[id:b66aedcd-6879-4a7f-856f-4de22a9a7bcd][(sarabander.github.io) SICP, 2e: 2.4 Multiple Representations for Abstract Data]] for definition, or lack thereof, of =apply-generic=, =put=, =get=
***** [[id:534896b8-bb7d-4603-9c55-c4803d6feeb0][(www.youtube.com) The Unreasonable Effectiveness of Multiple Dispatch | Stefan Karpinski | JuliaCon 2019 - YouTube]]
***** [[id:eb85baab-0f50-4825-81e5-c87cd6148665][(en.wikipedia.org) Expression problem - Wikipedia]]
***** [[id:836e3c3b-191d-47e7-9ef0-f2c9e3b51046][(www.juliaopt.org) 2019 JuMP-dev Keynote - stefan_karpinski.pdf]]
***** [[id:3d496345-f0c5-4f04-bb7e-ed7af607d571][(en.wikipedia.org) Numerical tower - Wikipedia]]
***** [[id:d8edf8ec-ea44-4603-9266-6084232c4d44][(en.wikipedia.org) The Diamond Problem - Multiple inheritance - Wikipedia]]
***** [[id:a2904658-1ceb-494b-b3b9-fc0889140872][(en.wikipedia.org) Python - Extending languages with multiple-dispatch libraries - Examples - Multiple dispatch - Wikipedia]]
***** [[id:3a79bf3b-f171-4794-9c0b-6b4cd4cf6b57][(en.wikipedia.org) Common Lisp Object System - Wikipedia]]
****** [[id:e48fca4d-6f9e-42a2-874a-0ca949a00db8][(en.wikipedia.org) Metaobject Protocol -  Metaobject - Wikipedia]]
***** [[id:7421929e-6baa-422b-b9e7-70e52df1ec3d][Greenspun's Tenth Rule]]
***** [[id:afb88a4f-487d-4291-8e24-49548b222646][(cs.brown.edu) The Structure and Interpretation of the Computer Science Curriculum (sics.dvi - paper.pdf)]]
***** [[id:5d0865bd-877f-4ca9-aaf4-691aaec4a3c1][(en.wikipedia.org) C++ - Emulating Multiple Dispatch - Examples - Multiple dispatch - Wikipedia]]
***** "Design patterns are what happens when you run out of language"
Seems to a mutation of Rich Hickey's
#+begin_quote
  Patterns mean "I have run out of language."
#+end_quote
which people seem to like quoting but not citing.
***** [[https://juliacon.org/2025/][JuliaCon 2025]]
***** [[id:eba3acf1-4582-49c4-b2af-4b66ac11437f][(sarabander.github.io) SICP, 2e: 2.5: Footnote #118]]
**** Session 9, [2025-05-11 Sun 15:00-16:00]
***** Current section [[id:c4efd117-2a1c-4066-844a-c7b6aaa13ac8][(sarabander.github.io) SICP, 2e: 3.1 Assignment and Local State]]
***** [[id:5eac4aa2-ab1e-44ae-bfd8-498e800d9a14][(sarabander.github.io) SICP, 2e: Term Index]]
***** [[id:acf32411-d75c-4303-8993-feaecc3d7429][(mathoverflow.net) algorithms - What is this modified arithmetico-geometric mean function? - MathOverflow]]
***** [[id:77e49f9f-c7c1-4829-b200-2aae2cacc14a][(mathstodon.xyz) Dan Piponi: "Sketch of proof based on paper…" - Mathstodon]]
***** [[id:49444189-1d98-43b7-b64c-2c31466c4734][(en.wikipedia.org) Side effect (computer science) - Wikipedia]]
****** [[id:712f13d2-7769-4807-864b-458f96125f6e][(en.wikipedia.org) Referential transparency - Wikipedia]]
****** [[id:0588feb7-8c43-476a-b55f-68d3b5761c77][(en.wikipedia.org) Idempotence - Wikipedia]]
****** [[id:b9e47c79-3620-43c1-8d2c-1ee05ea2c8d0][(en.wikipedia.org) Frame problem - Wikipedia]]
***** [[id:281a5050-627c-43ff-817b-1f2edeacbe97][(en.wikipedia.org) Algebraic data type - Wikipedia]]
***** [[id:08e14c51-227a-4d6c-ab9f-a6b0bdc993e3][(en.wikipedia.org) Abstract data type - Wikipedia]]
***** [[id:c85ec26d-5b42-4c3f-b5a7-16c53860025e][(elixirschool.com) Pipe Operator · Elixir School]]
***** [[id:91f3fe45-71ac-4d92-926e-c0058429763a][Crafting Interpreters by Robert Nystrom]]
***** [[id:f019fda3-5133-4cdb-b1c2-3361bbdd6782][(cacm.acm.org) A Programmable Programming Language – Communications of the ACM]]
**** Session 10, [2025-05-18 Sun 15:00-16:00]
***** Current section [[id:45d86aec-1cbf-4562-b350-6787585091e7][(sarabander.github.io) SICP, 2e: 3.2 The Environment Model of Evaluation]]
***** [[id:8e72da0e-d883-46e3-bd1b-96dd985fe8ca][(www.youtube.com) Lecture 5A | MIT 6.001 Structure and Interpretation, 1986 - YouTube]]
***** [[id:feca9603-fe83-4e16-bfab-d323bb06bc2e][(www.youtube.com) L21 Assignment and State | UC Berkeley Cs 61A, Spring 2010 - YouTube]]
***** [[id:6959fcfb-f0c3-422f-bce0-9e9103888602][The Garbage Collection Handbook]]
***** Diagramming parallel vs series frames and environments
Was attempting to draw a diagram of parallel vs. series frames when defining nested and non-nested functions and when calling said functions.
***** [[id:87ce890e-e647-45c9-825f-c98c030d44af][Build Your Own Lisp]]
**** Session 11, [2025-05-25 Sun 15:00-16:00]
***** Current section [[id:29b23078-07a0-470c-a8f9-ba522c99f0ff][(sarabander.github.io) SICP, 2e: 3.3 Modeling with Mutable Data]]
***** [[id:e74c4133-755a-428a-9067-5e35a5f6d836][(www.youtube.com) 6.001 SICP: Structure and Interpretation of Computer Programs (2004) - YouTube]]
****** In particular, Grant recommended [[id:9e601c08-6e33-4307-841b-09c372d7d04f][(www.youtube.com) 13. Environment Model - 6.001 Sicp (2004) - YouTube]] at 43 minutes in
***** [[https://physbuzz.github.io/sicp/ch3/notes-ch3-3.html#exercise-317][SICP Reading Group - Book Club Notes - Section 3.3 - Exercise 3.17]]
***** [[id:0bb30c6d-d5f2-45a8-8e23-17f3c9afec57][(con.racket-lang.org) RacketCon]]
***** [[id:bc09874a-eb5d-4791-83b9-a87ca32f5371][(www.youtube.com) From Here to Lambda and Back Again - Douglas Crockford - RacketCon 2023 - YouTube]] at 8 minutes was shared by Grant
***** Next time, still covering [[id:29b23078-07a0-470c-a8f9-ba522c99f0ff][(sarabander.github.io) SICP, 2e: 3.3 Modeling with Mutable Data]]
**** Session 12, [2025-06-01 Sun 15:00-16:00]
***** Current section [[id:29b23078-07a0-470c-a8f9-ba522c99f0ff][(sarabander.github.io) SICP, 2e: 3.3 Modeling with Mutable Data]]
***** Grant's example of =add-to-agenda!=
#+begin_src scheme
  (define (add-to-agenda! time action agenda)
    (define (belongs-before? segments)
      (or (null? segments)
          (< time
             (segment-time (car segments)))))
    (define (make-new-time-segment time action)
      (let ((q (make-queue)))
        (insert-queue! q action)
        (make-time-segment time q)))
    (define (add-to-segments! segments)
      (if (= (segment-time (car segments)) time)
          (insert-queue!
           (segment-queue (car segments))
           action)
          (let ((rest (cdr segments)))
            (if (belongs-before? rest)
                (set-cdr!
                 segments
                 (cons (make-new-time-segment
                        time
                        action)
                       (cdr segments)))
                (add-to-segments! rest)))))
    (let ((segments (segments agenda)))
      (if (belongs-before? segments)
          (set-segments!
           agenda
           (cons (make-new-time-segment
                  time
                  action)
                 segments))
          (add-to-segments! segments))))
#+end_src
***** Special forms vs. Function
#+begin_src scheme
  ;; =let= is a special form.  =(x 2)= isn't evaluated as a normal expression, rather is understood by the code of =let= to define a local binding.
  (let ((x 2))
    (display x))
  ;; =define= is also a special form.  Here, =(square x)= and =(* x x)= aren't evaluated; rather, they are taken, as-is, as input to =define= and mean "bind a lambda that takes a single argument to square" and "let the body of the lambda be (* x x)", respectively.
  (define (square x)
    (* x x))
  ;; Here, calling =square= is just calling a normal function.  Everything is evaluated as normal.  No special forms.
  (square 2)
#+end_src
***** [[id:f4346f29-bfa9-40dd-ac24-46595b4912e5][(conservatory.scheme.org) R5RS: Revised⁵ Report on the Algorithmic Language Scheme]]
***** [[id:ec476b78-d994-4475-85d2-ace10ac93e1c][(github.com) racket/racket: The Racket repository]]
Looking for the implementation of =assoc= in [[id:2ce20b11-e9e9-48b0-ab32-de7f4158ea33][Racket]]:
****** [[https://github.com/racket/racket/blob/06f13d69a245ae63927a2cb828d5097f668549e3/racket/collects/racket/private/list.rkt#L157][racket/racket/collects/racket/private/list.rkt line 157 at 06f13d69a245ae63927a2cb828d5097f668549e3 · racket/racket]]
****** [[https://github.com/racket/racket/blob/06f13d69a245ae63927a2cb828d5097f668549e3/racket/collects/racket/private/list.rkt#L195][racket/racket/collects/racket/private/list.rkt line 195 at 06f13d69a245ae63927a2cb828d5097f668549e3 · racket/racket]]
***** [[id:df62a9d5-c953-47d6-b676-7a76c03daf4d][(dspace.mit.edu) Computer Science and Artificial Intelligence Laboratory - Technical Report: The Art of the Propagator by Alexey Radul and Gerald Jay Sussman (MIT-CSAIL-TR-2009-002.pdf)]]
***** [[id:19cf3963-8ae4-41c3-89fc-f4ca92d0e809][(lobste.rs) Art of the Propagator (2008) | Lobsters]]
****** [[id:966ca5db-0e7e-43d5-b050-d832a86bec89][(dspace.mit.edu) The definition and implementation of a computer programming language based on constraints]]
***** [[id:73a2d347-ed0b-415f-b14c-2cb0ce678a6a][(www.youtube.com) "We Really Don't Know How to Compute!" - Gerald Sussman (2011) - YouTube]]
***** [[id:50de8c44-1d1d-4373-872e-e0ebc52bdf6d][(www.youtube.com) "Propositions as Types" by Philip Wadler - YouTube]]
***** [[id:0629d06f-fcf8-4951-9708-4b7464ea48d4][(store.steampowered.com) Virtual Circuit Board on Steam]]
***** [[id:5b5f6c48-20bc-42b7-b385-78329906de73][(www.nand2tetris.org) Home | nand2tetris]]
***** [[id:21331353-232a-4e8d-bb67-fc181de38e77][(en.wikipedia.org) Memoization - Wikipedia]]
***** [[id:5a1cdef4-a806-4f59-913e-7006db4e553d][(lfe.io) (LFE:Lisp Flavoured Erlang)]]
***** [[id:b56af9ad-1581-4bf7-9acd-d68e96f1b8f4][(en.wikipedia.org) LFE (programming language) - Wikipedia]]
***** [[https://physbuzz.github.io/sicp/ch3/notes-ch3-3.html#exercise-332][notes-ch3-3.md exercise 3.32]] from [[id:c3a40f0d-3819-4dd4-85fd-64f0411861fb][(physbuzz.github.io) notes-ch3-3.md]]
***** [[id:964680a7-8fa0-43cb-be98-7ed3bcbaffab][(www.amazon.com) Building Problem Solvers (Artificial Intelligence): Forbus, Kenneth D., De Kleer, Johan: 9780262061575: Amazon.com: Books]]
***** [[id:6e4aafba-d8b5-47f4-8e59-ba4b69525463][(mitpress.mit.edu) Software Design for Flexibility]]
****** [[id:166f6226-5f73-48bf-b2f0-1baa9149e18a][(mitpress.ublish.com) Software Design for Flexibility]]
***** [[id:2b8e0e27-5754-468b-8ce4-f46a7805f80f][(groups.csail.mit.edu) Revised Report on the Propagator Model]]
***** [[id:9c213abc-134f-4060-9a95-7774f21b1a9b][(en.wikipedia.org) Linguistic relativity - Wikipedia]]
***** [[id:675b9bb2-e444-4cfa-8150-0467c52d88b4][(www.amazon.com) Amazon.com: Common LISP: A Gentle Introduction to Symbolic Computation (Dover Books on Engineering) eBook : Touretzky, David S.: Kindle Store]]
***** [[id:fe9ec98a-8317-45ef-b8b7-77041b6857c3][(en.wikipedia.org) Leslie Lamport - Wikipedia]]
***** [[id:42200d58-35d3-43c2-b0fe-b2f4ddc0e14f][(en.wikipedia.org) Byzantine fault - Wikipedia]]
***** [[id:7d3e59a4-d586-471f-8c32-f6f267d0f068][(en.wikipedia.org) Lock (computer science) - Wikipedia]]
***** [[id:e4878ba3-1eac-48ff-bb56-ba65de3e40d2][(en.wikipedia.org) Semaphore - Wikipedia]]
***** [[id:8858e904-2bb2-402f-aca1-ad2d254806f2][(en.wikipedia.org) Semaphore (programming) - Wikipedia]]
***** Favorite footnote: [[id:a28f0383-3559-47db-8823-b329b017c2f0][(sarabander.github.io) SICP, 2e: 3.3, Footnote 148]]
***** Next time [[id:3d0e4610-7589-43ae-9c35-ecac837c09fb][(sarabander.github.io) SICP, 2e: 3.4 Concurrency: Time Is of the Essence]]
**** Session 13, [2025-06-08 Sun 15:00-16:00]
***** Current section [[id:3d0e4610-7589-43ae-9c35-ecac837c09fb][(sarabander.github.io) SICP, 2e: 3.4 Concurrency: Time Is of the Essence]]
***** [[https://physbuzz.github.io/sicp/ch3/notes-ch3-4.html#exercise-338][notes-ch3-4.md exercise 3.38]] from [[id:92730db7-8386-4e0d-b194-3ed27f545f74][(physbuzz.github.io) notes-ch3-4.md]]
***** [[id:118cbc2f-fd50-4360-940e-707594df0f8e][(pages.lip6.fr) Semantics of Combinations in Scheme (orleans.pdf)]]
***** [[id:2c97c02a-9707-456f-8182-c4ae9fdd97b3][(en.wikipedia.org) Peterson's algorithm - Wikipedia]]
***** [[id:8858e904-2bb2-402f-aca1-ad2d254806f2][(en.wikipedia.org) Semaphore (programming) - Wikipedia]]
***** [[id:e0d2ff16-269d-4954-9a76-25d6a0e15868][(franz.com) Franz Inc Customer Applications: Naughty Dog Software]]
***** [[id:3c1c82c0-b70c-422e-9af9-38295dcfe9f0][(opengoal.dev) OpenGOAL | OpenGOAL]]
***** [[id:7992775d-b6ac-4c7e-a509-04ee5cdcc318][(en.wikipedia.org) Game Oriented Assembly Lisp - Wikipedia]]
***** [[id:fe9ec98a-8317-45ef-b8b7-77041b6857c3][(en.wikipedia.org) Leslie Lamport - Wikipedia]]
****** [[id:42200d58-35d3-43c2-b0fe-b2f4ddc0e14f][(en.wikipedia.org) Byzantine fault - Wikipedia]]
***** [[id:764a886c-4ccf-49cb-b783-c2d23a5ac74b][(en.wikipedia.org) Edsger W. Dijkstra - Wikipedia]]
***** [[id:9fa5a52c-1cc5-4267-81b9-dbd9175a8041][(www.cs.utexas.edu) E.W.Dijkstra Archive: Cooperating sequential processes (EWD 123)]]
***** [[id:01ace579-2c80-46ab-bddd-bba1ab0acadd][(dl.acm.org) Time, clocks, and the ordering of events in a distributed system | Communications of the ACM]]
***** [[id:519be27b-6c91-407a-b933-f6eca06436d2][(dl.acm.org) The structure of the “THE”-multiprogramming system | Communications of the ACM]]
**** Session 14, [2025-06-15 Sun 15:00-16:00]
***** Current section [[id:54d70486-2673-4a0e-81a4-0e31bd047b13][(sarabander.github.io) SICP, 2e: 3.5 Streams]]
***** [[id:967104a4-5ff5-4b21-a1a2-40cedc60c8f8][(en.wikipedia.org) Apache Kafka - Wikipedia]]
***** [[id:477e7509-7f43-4114-b8e9-9af784f748db][(spark.apache.org) Apache Spark™ - Unified Engine for large-scale data analytics]]
***** [[id:24a8571b-941b-46de-9db1-bd5756dcc62f][(en.wikipedia.org) Cantor's diagonal argument - Wikipedia]]
***** [[id:c575f411-8c6f-40f7-a507-bfef7a9ca42c][(en.wikipedia.org) Farey sequence - Wikipedia]]
***** [[id:b0cc674c-8490-4af4-a228-cd41e051a100][(sarabander.github.io) SICP, 2e: 3.5, Footnote 186]]
***** Next session, continuing [[id:54d70486-2673-4a0e-81a4-0e31bd047b13][(sarabander.github.io) SICP, 2e: 3.5 Streams]]
**** Session 15, [2025-06-22 Sun 15:00-16:00]
***** Current section, continuing [[id:54d70486-2673-4a0e-81a4-0e31bd047b13][(sarabander.github.io) SICP, 2e: 3.5 Streams]]
***** [[id:f23ccb01-9834-4270-9157-e6892a892293][(sarabander.github.io) SICP, 2e: 3.5, Footnote 200]]
***** [[id:8d97c9f0-dbd7-479c-aa43-625a81d41f68][(en.wikipedia.org) Continuation-passing style - Wikipedia]]
***** [[https://www.gnu.org/software/guile/manual/html_node/Continuations.html][Continuations (Guile Reference Manual)]] from [[id:f6311b42-cf2d-490f-ac69-0075b82828b9][(www.gnu.org) Top (Guile Reference Manual)]]
***** [[id:d5573759-691d-4e50-8a2f-88cb349aad28][(en.wikipedia.org) Hygienic macro - Wikipedia]]
***** [[id:f4346f29-bfa9-40dd-ac24-46595b4912e5][(conservatory.scheme.org) R5RS: Revised⁵ Report on the Algorithmic Language Scheme]]
****** [[https://conservatory.scheme.org/schemers/Documents/Standards/R5RS/HTML/r5rs-Z-H-4.html][Revised^5 Report on the Algorithmic Language Scheme - Chapter 1: Overview of Scheme]]
#+begin_quote
  Scheme has latent as opposed to manifest types.  Types are associated with values (also called objects) rather than with variables.  (Some authors refer to languages with latent types as weakly typed or dynamically typed languages.)  Other languages with latent types are APL, Snobol, and other dialects of Lisp.  Languages with manifest types (sometimes referred to as strongly typed or statically typed languages) include Algol 60, Pascal, and C.
#+end_quote
***** [[id:77a8ed9a-c63c-4f59-b1eb-71bdcf057070][(sarabander.github.io) SICP, 2e: 3.5, Footnote 204]]
***** [[id:4ce14cbe-3b40-41af-bf7c-b4677450f635][(www.youtube.com) Oopsla Conference: Growing a Language - YouTube]]
***** Next session, [[id:bf2fb2a1-46ab-4e61-9224-5e92d399cb97][(sarabander.github.io) SICP, 2e: 4.1 The Metacircular Evaluator]]
**** Session 16, [2025-06-29 Sun 15:00-16:00]
***** Current section [[id:bf2fb2a1-46ab-4e61-9224-5e92d399cb97][(sarabander.github.io) SICP, 2e: 4.1 The Metacircular Evaluator]]
***** [[id:8b8e0774-c8b6-406d-b1a1-45e81546179b][(standards.scheme.org) r4rs.dvi - r4rs.pdf]]
***** [[id:80b2a783-0c85-451c-bed8-3370b933e222][(en.wikipedia.org) Model-driven engineering - Wikipedia]]
***** [[id:61260064-90fc-4a98-8484-94aee336dbeb][(www.amazon.com) Lisp in Small Pieces: Queinnec, Christian, Callaway, Kathleen: 9780521545662: Amazon.com: Books]]
***** [[id:7f99d684-3ab6-431d-8e07-f34308a1d0b2][(gustavus.edu) Concrete Abstractions]]
***** [[id:de46d019-dd0c-46a9-aac8-575c01946098][Software Design for Flexibility: How to Avoid Programming Yourself into a Corner]]
***** [[id:e3359747-2369-4f60-87ef-0bd9afed406e][(beautifulracket.com) Beautiful Racket by Matthew Butterick]]
****** [[https://beautifulracket.com/appendix/why-lop-why-racket.html][Beautiful Racket: Why language-oriented programming? Why Racket?]]
***** [[id:b66aedcd-6879-4a7f-856f-4de22a9a7bcd][(sarabander.github.io) SICP, 2e: 2.4 Multiple Representations for Abstract Data]]
****** 2.4.2: Tagged data
***** [[id:80c38d1f-3f2f-4a11-bb5f-87e721ae7672][(docs.racket-lang.org) The Typed Racket Guide]]
***** [[id:12498506-2078-4c7c-a5c1-fd20a153f9a9][(coalton-lang.github.io) The Coalton Language]]
***** [[id:f7f33f6d-1511-4429-996f-14857d74d53c][(www.youtube.com) 1. Introduction to Computation - 6.001 SICP (2004) - YouTube]]
***** [[id:36e4a475-e107-4e28-b1fb-a5ca1aa51e79][(yuriy-chumak.github.io) Summary]]
***** [[id:eeb73809-21fb-4cc9-97b0-f52d726ef058][(htdp.org) How to Design Programs]]
***** [[id:c2d9b1d2-004e-447c-aea6-c979572806d7][Concepts, Techniques, and Models of Computer Programming]]
***** [[id:7dc74952-dd2c-4fdc-b284-6a59c06eada8][(webperso.info.ucl.ac.be) Programming Paradigms for Dummies: What Every Programmer Should Know (VanRoyChapter.pdf)]]
***** [[id:641a1d88-189e-40a8-8340-f547b3dd5e16][(rybplayer.github.io) TAPL Reading | tapl-reading]]
***** [[id:80f32e87-a766-47c0-b698-8597076a382f][(sarabander.github.io) SICP, 2e: 4.1, Footnote 213]]
***** [[id:cf030a97-abaa-4a87-abc0-6305374b5166][(sarabander.github.io) SICP, 2e: 4.1, Footnote 228]]
***** [[id:8dcad8c9-1dd2-49b8-9ca7-97fe8a246529][(sarabander.github.io) SICP, 2e: 4.1, Footnote 232]]
***** Next session, [[id:b01f3776-c3ea-430a-8df3-723db559fa6b][(sarabander.github.io) SICP, 2e: 4.2 Variations on a Scheme — Lazy Evaluation]]
**** Session 17, [2025-07-06 Sun 15:00-16:00]
***** Current section [[id:b01f3776-c3ea-430a-8df3-723db559fa6b][(sarabander.github.io) SICP, 2e: 4.2 Variations on a Scheme — Lazy Evaluation]]
****** Terminology glossary (courtesy of [[id:e3186266-5969-4f6d-9de7-0007b1220135][Grant]])
4.2.1:
 - applicative-order
 - lazy evaluation
 - non-strict
 - normal-order
 - strict
4.2.2:
 - call-by-name
 - call-by-need
 - forcing
 - garbage-collected
 - memoize
 - thunk
 - thunks
 - upward-compatible extension
***** Pre-session discussion
****** [[id:c395fc52-04c5-427d-9ef7-28eaf2e78fa0][(en.wikipedia.org) Futures and promises - Wikipedia]]
****** [[id:ff5a9550-6faf-486a-9e48-6e8e821b5ec3][(docs.racket-lang.org) Pure functions and promises]]
****** [[id:5dba93ca-5fbd-4202-b245-080086d9ba39][(github.com) yuriy-chumak/ol: Otus Lisp (Ol) is a purely functional multi-platform Scheme dialect with built-in FFI and infix math.]]
***** [[https://ocw.mit.edu/courses/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video_galleries/video-lectures/][Video Lectures | Structure and Interpretation of Computer Programs | Electrical Engineering and Computer Science | MIT OpenCourseWare]] from [[id:ea6fa692-2340-4347-9b73-94a72aaddbfd][(ocw.mit.edu) Structure and Interpretation of Computer Programs | Electrical Engineering and Computer Science | MIT OpenCourseWare]]
***** [[https://www.youtube.com/watch?v=QVEOq5k6Xi0][Lecture 7B: Metacircular Evaluator, Part 2 - YouTube]], a part of [[id:e41230b4-3dee-4a59-aefa-712ca2229e4e][(www.youtube.com) MIT 6.001 Structure and Interpretation, 1986 - YouTube]]
****** See also [[id:e74c4133-755a-428a-9067-5e35a5f6d836][(www.youtube.com) 6.001 SICP: Structure and Interpretation of Computer Programs (2004) - YouTube]]
***** [[id:4ce14cbe-3b40-41af-bf7c-b4677450f635][(www.youtube.com) Oopsla Conference: Growing a Language - YouTube]]
***** [[id:9e65a3cb-c744-465e-b45d-c9494fddb701][(jmc.stanford.edu) History of Lisp]]
***** [[id:066533b0-be0f-41de-9baf-dd942c3ee416][(github.com) jart/sectorlisp: Bootstrapping LISP in a Boot Sector]]
***** [[id:63f86d36-84a9-4d58-8da6-e97ee1a53cbb][(justine.lol) SectorLISP Now Fits in One Sector]]
***** [[id:47d46f49-0611-49ed-a4ef-746558dfe97a][(justine.lol) LISP with GC in 436 bytes]]
***** [[id:193864c7-fcba-4112-b70a-3cab35a25b11][(justine.lol) Lambda Calculus in 383 Bytes]]
***** [[id:e734b3b6-10ab-4f22-8fa5-e7b672844076][(www-formal.stanford.edu) recursive.dvi - recursive.pdf]]
***** [[id:05e87771-2ba8-4077-9a22-604643be97a3][(paperswelove.org) Papers We Love]]
***** [[id:57b03469-0372-49ca-b0ff-853279cbda16][(sarabander.github.io) SICP, 2e: 4.2, Footnote 238]]
***** [[id:0d6b37b2-0188-495e-8df9-f7fbdff7cdf9][(sarabander.github.io) SICP, 2e: 4.2, Footnote 239]]
***** [[id:73a012e2-88e4-4c06-8e46-dfab714c2d0e][(sarabander.github.io) SICP, 2e: 4.2, Footnote 240]]
***** [[id:ca6cd248-5759-4656-8511-6f2eca9460ee][(sarabander.github.io) SICP, 2e: 4.2, Footnote 241]]
***** Implementation of integration with lazy evaluation instead of streams, as in [[id:54d70486-2673-4a0e-81a4-0e31bd047b13][SICP, 2e: 3.5]]
From 3.5.4:
#+begin_src scheme
  (define int
    (cons-stream
     initial-value
     (add-streams
      (scale-stream integrand dt) int)))
  (define (solve f y0 dt)
    (define y (integral dy y0 dt))
    (define dy (stream-map f y))
    y)
  (define (integral
           delayed-integrand initial-value dt)
    (define int
      (cons-stream
       initial-value
       (let ((integrand
              (force delayed-integrand)))
         (add-streams
          (scale-stream integrand dt)
          int))))
    int)
  (define (solve f y0 dt)
    (define y (integral (delay dy) y0 dt))
    (define dy (stream-map f y))
    y)
  (stream-ref
   (solve (lambda (y) y) 1 0.001) 1000)
  ; 2.716924
#+end_src
From 4.2.3:
#+begin_src scheme
  (define (cons x y) (lambda (m) (m x y)))
  (define (car z) (z (lambda (p q) p)))
  (define (cdr z) (z (lambda (p q) q)))

  (define (list-ref items n)
    (if (= n 0)
        (car items)
        (list-ref (cdr items) (- n 1))))

  (define (map proc items)
    (if (null? items)
        '()
        (cons (proc (car items))
              (map proc (cdr items)))))

  (define (scale-list items factor)
    (map (lambda (x) (* x factor))
         items))

  (define (add-lists list1 list2)
    (cond ((null? list1) list2)
          ((null? list2) list1)
          (else (cons (+ (car list1)
                         (car list2))
                      (add-lists
                       (cdr list1)
                       (cdr list2))))))

  (define ones (cons 1 ones))

  (define integers
    (cons 1 (add-lists ones integers)))


  (define (integral integrand initial-value dt)
    (define int
      (cons initial-value
            (add-lists (scale-list integrand dt)
                       int)))
    int)

  (define (solve f y0 dt)
    (define y (integral dy y0 dt))
    (define dy (map f y))
    y)

  ;;; L-Eval input:
  (list-ref (solve (lambda (x) x) 1 0.001) 1000)

  ;;; L-Eval value:
  ;2.716924
#+end_src
**** Session 18, [2025-07-13 Sun 15:00-16:00]
***** Current section [[id:da4c3b80-24fe-4817-8443-87a1ccee7910][(sarabander.github.io) SICP, 2e: 4.3 Variations on a Scheme — Nondeterministic Computing]]
***** [[id:db0c8151-b485-4060-890c-10a326d93a47][(www-formal.stanford.edu) A BASIS FOR A MATHEMATICAL THEORY OF COMPUTATION]]
***** [[id:2158c20e-613e-4da6-8cd4-0d5571362249][(www.paulgraham.com) On Lisp]]
***** [[id:c5dfdf39-fe95-4f63-b443-778c67652aa7][Satisfiability modulo theories - Wikipedia]]
****** [[id:587195e0-05b2-4d98-8fc0-83002892bbf4][(en.wikipedia.org) Z3 Theorem Prover - Wikipedia]]
***** [[id:406eca58-06a4-4a4f-bf29-28ec8c17c224][(github.com) aimacode/aima-lisp: Common Lisp implementation of algorithms from Russell And Norvig's "Artificial Intelligence - A Modern Approach"]]
***** From [[id:e3186266-5969-4f6d-9de7-0007b1220135][Grant]], "actually, here is some code example of search in On Lisp in a nondeterministic style."
#+caption: Fig 22.1 from On Lisp: Deterministic tree search.
#+begin_src scheme
  (define (descent n1 n2)
      (if (eq? n1 n2)
          (list n2)
          (let ((p (try-paths (kids n1) n2)))
            (if p (cons n1 p) #f))))

  (define (try-paths ns n2)
      (if (null? ns)
          #f
          (or (descent (car ns) n2)
              (try-paths (cdr ns) n2))))
#+end_src

#+caption: Fig 22.2 from On Lisp: Nondeterministic tree search.
#+begin_src scheme
  (define (descent n1 n2)
      (cond ((eq? n1 n2) (list n2))
            ((null? (kids n1)) (fail))
            (else (cons n1 (descent (choose (kids n1)) n2)))))
#+end_src
***** From [[id:e3186266-5969-4f6d-9de7-0007b1220135][Grant]], "here are his implementations of choose and fail. (there seem to be some formatting errors -- there were some issues in getting the book converted to PDF as the original manuscript was lost iirc)"
#+caption: Fig 22.4 from On Lisp: Scheme implementation of /choose/ and /fail/.
#+begin_src scheme
  (define *paths* ())
  (define failsym '@)

  (define (choose choices)
      (if (null? choices)
          (fail)
          (call-with-current-continuation
           (lambda (cc)
             (set! *paths*
                   (cons (lambda ()
                           (cc (choose (cdr choices))))
                         ,*paths*))
             (car choices)))))

  (define fail)

  (call-with-current-continuation
   (lambda (cc)
     (set! fail
           (lambda ()
             (if (null? *paths*)
                 (cc failsym)
                 (let ((p1 (car *paths*)))
                   (set! *paths* (cdr *paths*))
                   (p1)))))))
#+end_src
***** [[id:106ba304-23e6-4e4f-8d39-ef9b2d048991][(www.youtube.com) Zoom into 1/Phi - YouTube]]
***** [[https://www-formal.stanford.edu/jmc/basis1/node7.html#SECTION00025000000000000000][Ambiguous Functions]] from [[id:db0c8151-b485-4060-890c-10a326d93a47][(www-formal.stanford.edu) A BASIS FOR A MATHEMATICAL THEORY OF COMPUTATION]]
***** [[https://cs61c.org/su25/][Home | CS 61C Summer 2025]] from [[id:34e4ecb5-ef41-42cf-af05-2c7231998105][(cs61a.org) CS 61A Spring 2025]]
***** [[id:d99ccdca-d940-4e4d-8536-88425b8a01ed][(sp25.datastructur.es) Home | CS 61B Spring 2025]]
**** Session 19, [2025-07-20 Sun 15:00-16:00]
***** Current section [[id:dfb7cf86-1daa-4b28-9c43-1d8026b1a970][(sarabander.github.io) SICP, 2e: 4.4 Logic Programming]]
***** [[id:69a18027-5115-4206-9ff9-fbd09a48ec76][(en.wikipedia.org) Mnesia - Wikipedia]]
***** [[id:1f967e65-c783-4a7b-9a6c-51efdee4d0be][(peps.python.org) PEP 636 – Structural Pattern Matching: Tutorial | peps.python.org]]
****** [[id:8fd95bf2-8ff8-404a-8c4d-9068d24d3cb5][(peps.python.org) PEP 634 – Structural Pattern Matching: Specification | peps.python.org]]
******* [[id:37754f52-27a9-4a8f-85c3-d8e4c897ab2a][(docs.python.org) 8.6: The =match= statement]]
***** [[https://www.gnu.org/software/guile/manual/html_node/Pattern-Matching.html][Pattern Matching (Guile Reference Manual)]] from [[id:f6311b42-cf2d-490f-ac69-0075b82828b9][(www.gnu.org) Top (Guile Reference Manual)]]
***** [[id:728907af-960f-4d75-8324-e5d2e2f76049][(edicl.github.io) CL-WHO - Yet another Lisp markup language]]
***** [[id:607fd56b-7a94-4a30-9489-a66ec3e9a0a9][(github.com) guicho271828/trivia: Pattern Matcher Compatible with Optima]]
**** Session 20, [2025-07-27 Sun 15:00-16:00]
***** Current section [[id:dfb7cf86-1daa-4b28-9c43-1d8026b1a970][(sarabander.github.io) SICP, 2e: 4.4 Logic Programming]], continued
***** [[id:6c7b4ebb-09a5-4de2-a7e5-1e1a0da45721][(minikanren.org) miniKanren.org]]
***** [[id:e6ef43cd-9ac3-4f9d-83ed-765755d6a017][(codeberg.org) ashton314/microKanren - Codeberg.org]]
***** [[https://www.plai.org/3/2/PLAI%20Version%203.2.2%20electronic.pdf#h.19zaqlbd627k][Programming Languages: Application and Interpretation, pp. 177: Relations]] from [[id:376d3d68-2a89-4462-a017-762d026d49b7][(www.plai.org) PLAI Version 3.2.2 - PLAI Version 3.2.2 electronic.pdf]]
***** [[id:e41230b4-3dee-4a59-aefa-712ca2229e4e][(www.youtube.com) MIT 6.001 Structure and Interpretation, 1986 - YouTube]]
****** [[https://www.youtube.com/watch?v=rCqMiPk1BJE&list=PLE18841CABEA24090&index=17][Lecture 8A: Logic Programming, Part 1 - YouTube]]
****** [[https://www.youtube.com/watch?v=GReBwkGFZcs&list=PLE18841CABEA24090&index=18][Lecture 8B: Logic Programming, Part 2 - YouTube]]
***** [[id:583a7071-836b-4149-9be2-5d714edd0b92][(www.youtube.com) Unifying Substitutions and the Unification Process: With 8 Practical Examples - YouTube]]
***** [[id:8b6b43c1-3e5e-4a23-927d-de0281f822ff][(www.youtube.com) Type systems: Lambda calculus to Hindley-Milner - YouTube]]
***** [[id:c49d3fa4-05a0-4df8-9edd-fbb28a98f9a3][(en.wikipedia.org) Hindley–Milner type system - Wikipedia]]
***** [[id:81b7380f-754d-4632-a066-a1810997db89][(en.wikipedia.org) System F - Wikipedia]]
***** [[id:9b51b406-d33c-4a9b-b149-22d92a26b419][(www.youtube.com) William Byrd on "The Most Beautiful Program Ever Written" [PWL NYC] - YouTube]]
***** [[id:b13e7ada-ec71-4759-ac9d-ba6f8b46af51][(en.wikipedia.org) Unification (computer science) - Wikipedia]]
***** [[id:447f18af-8533-4ba9-8baa-aa0ca2bfdcaa][(en.wikipedia.org) Fifth Generation Computer Systems - Wikipedia]]
***** [[id:e64509e7-15cf-43cf-ab47-257ea3113f38][(www.youtube.com) Why Is Japan so Weak in Software? - YouTube]]
***** [[id:abf34c33-f828-452d-8a2c-4acc8adf69e9][(curry-lang.org) Curry Programming Language]]
***** [[id:8f13a731-4f50-4bc5-8439-a311aadca30f][(en.wikipedia.org) Datalog - Wikipedia]]
***** [[id:254784c3-afa9-41db-8241-9cfc8c32d814][(blogit.michelin.io) An introduction to Datalog]]
***** [[id:bd06ed04-35a8-4857-bc7f-275dc1c03eab][(en.wikipedia.org) Nondeterministic finite automaton - Wikipedia]]
***** [[id:a592fdab-5b43-4124-87f9-09367184c691][(en.wikipedia.org) Zermelo–Fraenkel set theory - Wikipedia]]
***** [[id:e34910ff-0f17-4c2c-9b41-89a709c8598c][(www.openpolicyagent.org) Policy Language | Open Policy Agent]]
The Rego programming language used for specifying policies for Open Policy Agent.
***** [[id:0ab5defe-f477-466a-b645-20223c8aae70][(cs61c.org) Home | CS 61C Summer 2025]]
***** [[id:2a012554-a33a-4132-87c2-1ff9f6ffb809][(webassembly.org) WebAssembly]]
***** [[id:b5524cba-de16-4d67-8fd4-d3ceefcab44c][(icfp24.sigplan.org) Scheme on WebAssembly: It is happening! (Scheme 2024) - ICFP 2024]]
***** [[id:5eeb5625-1540-4fa8-9b3f-2a5853cdcc65][(spritely.institute) Hoot: Scheme on WebAssembly — Spritely Institute]]
***** [[id:bda2016b-beeb-4980-a828-0ff70aec4ff5][(wingolog.org) a world to win: webassembly for the rest of us — wingolog]]
**** Session 21, [2025-08-03 Sun 15:00-16:00]
***** Current section [[id:a179b468-af99-43b8-9372-f0921f9a55b0][(sarabander.github.io) SICP, 2e: 5.1 Designing Register Machines]]
***** [[id:a01898e3-1cc3-4009-8b99-81e0ff018caa][(diveintosystems.org) Dive into Systems]]
***** [[https://diveintosystems.org/book/C5-Arch/hist.html][Dive Into Systems - 5.1. The Origin of Modern Computing Architectures]]
***** [[https://diveintosystems.org/book/C9-ARM64/common.html][Dive Into Systems - 9.2. Common Instructions]]
***** [[id:f7baaf85-3eb4-497d-b854-1c9f0075b297][(ieeexplore.ieee.org) The Myth of the Harvard Architecture | IEEE Journals & Magazine | IEEE Xplore]]
***** [[id:fab53e34-ce16-4d92-acfb-225d47dbbef7][UML]]
****** [[id:8d354fa2-6828-4a45-8ad2-1f29f5a881e0][(mermaid.js.org) Mermaid | Diagramming and charting tool]]
***** [[https://diveintosystems.org/book/C9-ARM64/preliminaries.html][Dive Into Systems - 9.4.1. Preliminaries]]
***** [[https://diveintosystems.org/book/C8-IA32/preliminaries.html][Dive Into Systems - 8.4.1. Preliminaries]]
***** [[id:ff7285c7-55a8-44e1-9974-077d10c35621][(www.sciencedirect.com) Load-Store Architecture - an overview | ScienceDirect Topics]]
***** [[https://ocw.mit.edu/courses/6-001-structure-and-interpretation-of-computer-programs-spring-2005/resources/9a-register-machines/][9A: Register Machines | Structure and Interpretation of Computer Programs | Electrical Engineering and Computer Science | MIT OpenCourseWare]] / [[https://www.youtube.com/watch?v=cIc8ZBMcqAc][Lecture 9A: Register Machines - YouTube]] from [[id:e74c4133-755a-428a-9067-5e35a5f6d836][(www.youtube.com) 6.001 SICP: Structure and Interpretation of Computer Programs (2004) - YouTube]]
***** [[https://ocw.mit.edu/courses/6-001-structure-and-interpretation-of-computer-programs-spring-2005/resources/9b-explicit-control-evaluator/][9B: Explicit-control Evaluator | Structure and Interpretation of Computer Programs | Electrical Engineering and Computer Science | MIT OpenCourseWare]] / [[https://www.youtube.com/watch?v=Z8-qWEEwTCk][Lecture 9B: Explicit-Control Evaluator - YouTube]] from [[id:e74c4133-755a-428a-9067-5e35a5f6d836][(www.youtube.com) 6.001 SICP: Structure and Interpretation of Computer Programs (2004) - YouTube]]
***** [[id:3c1c82c0-b70c-422e-9af9-38295dcfe9f0][(opengoal.dev) OpenGOAL | OpenGOAL]]
***** [[id:e0d2ff16-269d-4954-9a76-25d6a0e15868][(franz.com) Franz Inc Customer Applications: Naughty Dog Software]]
***** [[id:0bd9eb3d-8711-4b08-a88e-9ced9cee5964][(prescheme.org) Pre-Scheme]]
