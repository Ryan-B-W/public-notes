:PROPERTIES:
:ID:       2a07e4ea-610b-4c9a-bb84-d961fb2450e5
:END:
#+title: Code and Coffee Book Club
#+filetags: :events:social:

The official book club of [[id:c2a1e83d-86c0-46bd-bd71-7b604420d3d0][Code and Coffee Long Beach]].

Hosted online on the Code and Coffee [[id:d2412b09-9507-42f7-a674-512b4c18b680][Discord server]], livestreamed to [[id:6735a31a-80b1-41ff-bddd-9d2dc6e50f14][twitch]], and uploaded to [[id:35ce0229-5235-486f-9384-674649c9c180][YouTube]].
* Books
** [[id:bc4f5e4a-5bb9-47f7-8086-d12236fe793f][Structure and Interpretation of Computer Programs]]
*** Sessions
**** Session Zero, [2025-02-23 Sun 15:00-16:00]
:PROPERTIES:
:ID:       3bdab7d2-9dfa-477a-851b-7e8e52aa51b5
:END:
***** Linked in Twitch Chat
****** [[id:1114dfc3-8db9-4389-9d27-4b586a719f17][(linkencore.iii.com) Encore -- Structure and interpretation of computer programs / Harold Abelson and Gerald Jay Sussman ; adapted to JavaScript by Martin Henz and Tobias Wrigstad with Julie Sussman.]]
****** [[id:cb5f7acd-22bb-48f7-9ffa-034b058726d1][(sourceacademy.org) Source Academy]]
****** [[id:1256f4d8-25aa-4d39-a1bd-da6272adedae][(shaunlebron.github.io) Parinfer - simpler Lisp editing]]
****** [[id:d8a6cfff-6757-42db-8850-8830dedcd067][(linkencore.iii.com) Encore -- An elementary introduction to the Wolfram language / Stephen Wolfram.]]
****** [[id:93b26e85-6889-4277-9ee5-6c918477a6df][(www.wolfram.com) An Elementary Introduction to the Wolfram Language by Stephen Wolfram]]
****** [[id:bb915ed7-065b-4c58-8124-a39adec7cac0][(www.industriallogic.com) Knowledge Hydrant: A Pattern Language for Study Groups - khdraft.pdf]]
****** [[id:0f83331c-9e15-4622-8041-320b890e821b][(linkencore.iii.com) Encore -- Structure and interpretation of computer programs / Harold Abelson and Gerald Jay Sussman, with Julie Sussman ; foreword by Alan J. Perlis.]]
****** [[id:22349593-c7e7-430e-8858-1b066f0d4b6e][(journal.stuffwithstuff.com) JavaScript Isn’t Scheme – journal.stuffwithstuff.com]]
****** [[id:f82bd36c-04e2-485f-8f99-2f742000031d][(news.ycombinator.com) JavaScript Isn't Scheme | Hacker News]]
***** (www.meetup.com) Code and Coffee Book Club, Sun, Feb 23, 2025, 3:00 PM | Meetup :events:website:
:PROPERTIES:
:ID:       e1e4b40e-71a2-4e7b-9d0f-a5f3116f0922
:ROAM_REFS: https://www.meetup.com/code-and-coffee-long-beach/events/306193274/
:END:

#+begin_quote
  * Code and Coffee Book Club

  Hosted By Ryan W.

  ** Details

  The focus is on technical books, especially ones considered classical computer science texts.

  Current book: Structure and Interpretation of Computer Programs, second edition.

  This first session will be an introduction to the book club, an overview of the first book, covering the preface of the book, and deciding how much material to cover in the next session.  The second session will dive into the body of the book.

  The book club will be held online in the Code && Coffee Discord server in a voice channel and will be streamed online on the Code && Coffee Twitch channel.  As always, every one is welcome to participate in their choice of text, voice, or video chat.

  Tags: Book Club, Learning, Lisp, Programming Languages, Computer Programming
#+end_quote
****** Links from Comments
******* [[id:40abe704-c648-4281-b4a0-5fbab64c5775][(mitp-content-server.mit.edu) Welcome to the SICP Web Site]]
******* [[id:790316b8-3c04-40a2-b0ef-fda647f907c7][(github.com) sarabander/sicp: HTML5/EPUB3 version of SICP]]
******* [[id:ea6fa692-2340-4347-9b73-94a72aaddbfd][(ocw.mit.edu) Structure and Interpretation of Computer Programs | Electrical Engineering and Computer Science | MIT OpenCourseWare]]
******* [[id:e41230b4-3dee-4a59-aefa-712ca2229e4e][(www.youtube.com) MIT 6.001 Structure and Interpretation, 1986 - YouTube]]
******* [[id:6735a31a-80b1-41ff-bddd-9d2dc6e50f14][(www.twitch.tv) CodeAndCoffeeLB - Twitch]]
******* [[id:82dac0a3-1609-43d4-ae80-1433e32ddfbb][(www.racket-lang.org) Racket]]
******** [[id:6525fb29-4aa1-4c0a-8fd2-d5024a3ae869][(docs.racket-lang.org) SICP Collections]]
******* [[id:87a77034-fae3-406c-9479-cda62e765e76][(mitpress.mit.edu) Structure and Interpretation of Computer Programs]]
******* [[id:a183f1e8-866d-4586-b5f9-a6a37a0e467a][(sicpebook.wordpress.com) Structure and Interpretation of Computer Programs (SICP) by Abelson & Sussman – SICP]]
******* [[id:18a1ad86-a00c-437a-b253-ba0d24299574][(www.scheme.org) The Scheme Programming Language]]
******* [[id:7baffabc-9c70-4bb9-b719-3519f7eb68b0][(try.scheme.org)]]
******* [[id:0f83331c-9e15-4622-8041-320b890e821b][(linkencore.iii.com) Encore -- Structure and interpretation of computer programs / Harold Abelson and Gerald Jay Sussman, with Julie Sussman ; foreword by Alan J. Perlis.]]
******* [[id:22349593-c7e7-430e-8858-1b066f0d4b6e][(journal.stuffwithstuff.com) JavaScript Isn’t Scheme – journal.stuffwithstuff.com]]
******* [[id:f82bd36c-04e2-485f-8f99-2f742000031d][(news.ycombinator.com) JavaScript Isn't Scheme | Hacker News]]
******** [[id:54bc44dd-5e3d-42eb-80ac-df3ef2a005df][(news.ycombinator.com) JavaScript Isn't Scheme (2013) | Hacker News]]
******* [[id:36cc076e-e5dd-435d-ac6a-f1a9fa4b04b0][(people.eecs.berkeley.edu) Simply Scheme: Introducing Computer Science]]
******* [[id:c07d6ee3-5a5d-4bae-ba41-e72989c8ba86][(mitpress.mit.edu) The Little Schemer]]
******* [[id:3cbd9c3a-e06d-4655-ba41-ccabde8d0389][(mitpress.mit.edu) The Reasoned Schemer]]
******* [[id:eeb73809-21fb-4cc9-97b0-f52d726ef058][(htdp.org) How to Design Programs]]
******* [[id:d8258db6-97b3-4459-999c-560fd8830965][(webperso.info.ucl.ac.be) Concepts, Techniques, and Models of Computer Programming]]
******* [[id:10207667-9bc2-4b0f-b359-9c85178a2d5d][(mitpress.mit.edu) The Seasoned Schemer]]
******* [[id:e3359747-2369-4f60-87ef-0bd9afed406e][(beautifulracket.com) Beautiful Racket by Matthew Butterick]]
******* [[id:1256f4d8-25aa-4d39-a1bd-da6272adedae][(shaunlebron.github.io) Parinfer - simpler Lisp editing]]
******* [[id:fa9ee46b-81b9-4c6f-a784-f0cca7d74256][(paredit.org) paredit — parenthetical editing in Emacs]]
***** Links from Discord
****** [[id:ebad0914-e115-4476-91f5-32a6083dfaab][(github.com) source-academy/sicp: XML sources of SICP and SICP JS, and support for generating Interactive SICP JS, PDF, e-book and comparison editions]]
****** [[id:ce46e60f-b522-406f-a2a8-85cf65312d8a][(sicp.sourceacademy.org) Structure and Interpretation of Computer Programs JavaScript Edition (sicpjs.pdf)]]
****** [[id:f507a8ed-b2e1-445e-8d9c-514ea1307aea][(en.wikipedia.org) Higher-order function - Wikipedia]]
****** [[id:84edb9cd-8f7b-4ae7-8a93-1f9f70c70608][(www.gnu.org) Symbols (GNU Emacs Lisp Reference Manual)]]
****** [[id:5edf24bc-eeaa-465f-b90f-8565edbb600b][(en.wikipedia.org) Curry–Howard correspondence - Wikipedia]]
****** [[id:5503edd7-c9b7-4428-a2ec-bf05a61a8ed7][(writings.stephenwolfram.com) Combinators and the Story of Computation—Stephen Wolfram Writings]]
***** [[id:130c4aa4-c318-4a59-904f-e9ebc429c18c][(physbuzz.github.io) 02-23-2025.md]]
**** Session One, [2025-03-02 Sun 15:00-16:00]
***** [[id:b85b9acb-443c-4d3f-842b-1f663c99ef18][(sarabander.github.io) Structure and Interpretation of Computer Programs, 2e: 1.1]]
***** [[id:250b2e70-00fa-426e-b8b2-730ee1d4b960][(physbuzz.github.io) notes-ch1-1.md]]
***** [[id:5edf24bc-eeaa-465f-b90f-8565edbb600b][(en.wikipedia.org) Curry–Howard correspondence - Wikipedia]]
***** [[id:5509c95a-ba92-4a76-ae77-5c3a2b1368ba][(en.wikipedia.org) Fixed-point combinator - Wikipedia]]
**** Session Two, [2025-03-16 Sun 15:00-16:25]
***** [[id:d4e8ce6b-05bb-4338-b3ff-1bb12c109dea][(sarabander.github.io) Structure and Interpretation of Computer Programs, 2e: 1.2]]
***** [[id:51594a7b-3ca6-4bc2-a5fc-b983660cb475][(physbuzz.github.io) notes-ch1-2.md]]
***** [[id:aa79adc9-3e6a-4056-9bd8-6fe00a1ccf12][(en.wikipedia.org) Extended Euclidean algorithm - Wikipedia]]
***** [[id:48a3942c-c963-49a0-aa59-b23231eab7f8][(en.wikipedia.org) Chinese remainder theorem - Wikipedia]]
***** [[id:46f082ae-40c1-4621-94cc-bc78cb823859][(en.wikipedia.org) Linear Diophantine equations - Diophantine equation - Wikipedia]]
***** [[id:21a8b700-fb6b-4e90-9f17-267f7f4ba53d][(en.wikipedia.org) Big O notation - Wikipedia]]
***** [[id:02954d3b-35db-4d34-b504-b110ec7257a5][(books.google.com) How to Prove It: A Structured Approach - Daniel J. Velleman - Google Books]]
***** [[id:b60d88a6-5396-4183-ad7d-74919d13a39b][(nature-of-computation.org) The Nature Of Computation]]
***** [[id:165d540b-70bf-4646-a817-0c5f8c920fa9][(www.cambridge.org) Computational Complexity]]
***** [[id:dbdd9131-2ccd-4a7d-a780-2ebd2aceed8c][(www.amazon.com) The Computational Beauty of Nature: Computer Explorations of Fractals, Chaos, Complex Systems, and Adaptation: Flake, Gary William: 9780262561273: Amazon.com: Books]]
***** [[id:dd2f4b13-7fd9-4dda-9445-bbf7a61e65d0][(mathstodon.xyz) Simone Conradi: "The absolute value of a soluti…" - Mathstodon]]
***** [[id:82c9cfe8-eb0d-4340-8592-373c3581c0dd][(en.wikipedia.org) Lie algebra - Wikipedia]]
***** [[id:9f49f590-90a1-4cca-9da0-d5bf922c2d3f][(en.wikipedia.org) Quaternion - Wikipedia]]
***** [[id:0cd682ff-d2c0-4ee9-af88-5729e0e89c1c][(lockywolf.wordpress.com) Solving SICP – Various Thoughts]]
***** [[id:6a1c8f81-f34c-46ca-9865-ed082b968d0b][(news.ycombinator.com) Solving SICP | Hacker News]]
***** [[id:f813f14e-fa7e-4fdf-bf91-73debeaa4ce9][(longformmath.com) Long(er)-Form Mathematics – LFM Textbooks]]
***** [[id:dfb9719d-6ed3-46ed-ae2e-50ba87e0eca2][(projecteuler.net) About - Project Euler]]
***** [[id:8a6e02d9-17df-407d-9cb8-4b0306852fe3][(en.wikipedia.org) Cryptographic nonce - Wikipedia]]
***** [[id:9d37a76d-1b42-46d2-87da-13d0905b7c99][(tvtropes.org) Noodle Incident - TV Tropes]]
***** [[id:5544c0de-0f34-4f09-bb32-8db365901a12][(hn.algolia.com) "random number generator" All | Search powered by Algolia]]
***** [[id:2240b046-b115-42f9-b036-e70df07c1a5a][(www.valerionappi.it) Generating true random numbers from bananas - Valerio Nappi]]
***** [[id:87a1a554-a120-484e-a014-80f3135627a7][(en.wikipedia.org) Introduction to Algorithms - Wikipedia]]
****** [[id:11438879-fe1a-4e45-b25b-3a7563627422][Ronald L. Rivest]]
******* [[id:7cf931f8-5095-4473-8010-b94ed35b914d][Adi Shamir]]
******* [[id:6edcb9e7-8f35-4796-854c-b216873ee148][Leonard M. Adleman]]
**** Session Three, [2025-03-23 Sun 15:00-16:00]
***** [[id:10ed2665-130f-4398-8efa-ce9795584da0][(sarabander.github.io) Structure and Interpretation of Computer Programs, 2e: 1.3]]
***** Next: [[id:4e6b6934-89b2-4125-b046-9628e20427e8][SICP Chapter 2 (intro)]] and [[id:6d5c6805-fb40-49d9-9a91-93733bde2818][SICP Section 2.1]]
***** Java's usage of the word "body" was brought up
SICP does use "Body", in the same sense.  In addition, according to [[id:caf4759c-81d6-479b-b677-c88b65dd636f][Wikipedia]], the book predates Java by around 11 years.
***** Closures were discussed
The book sticks to the mathematical definition, see [[id:2edf6633-4e65-4ebd-81c3-a842cb759479][(sarabander.github.io) Structure and Interpretation of Computer Programs, 2e: 2.2]], and not the definition commonly used by [[id:84ae6e85-a6a2-4133-bc53-274238081c2d][Lisp]] and [[id:db0939e6-0c2e-4bb0-a626-2114209235af][JavaScript]] programmers.
***** [[id:91f6ff47-2dcb-444f-bd32-79151a4e1f22][(pythontutor.com) Python Tutor - Python Online Compiler with Visual AI Help]]
Was mentioned in passing, in regard to the substitution model of execution.  See also [[https://sarabander.github.io/sicp/html/1_002e1.xhtml#g_t1_002e1_002e5][SICP2e 1.1.5: The Substitution Model for Procedure Application]].
***** [[id:032ff6ce-e694-4d1a-b575-3dc4512f09b7][(en.wikipedia.org) Wolfram Language - Wikipedia]]
Similarities to the [[id:3e3a70b9-48ef-470a-bb79-03acaea29f1e][Wolfram Language]] were brought up.
***** A comparison was made between higher-order functions in [[id:c46eea5e-e2d2-4a21-bafe-74b6751292d2][C]] vs [[id:84ae6e85-a6a2-4133-bc53-274238081c2d][Lisp]]
An example of C using function-pointers was given of [[id:d163e4fb-477a-459c-819f-598012df912c][=qsort=]].  Higher-order functions are more powerful in Lisp due to the ability to programmatically define new functions at runtime based on program input.
***** [[id:73f4a605-b675-4a9d-923f-2fa379a89bac][(www.youtube.com) Mathematical Physics 01 - Carl Bender - YouTube]]
***** [[id:45d86aec-1cbf-4562-b350-6787585091e7][(sarabander.github.io) SICP, 2e: 3.2 The Environment Model of Evaluation]]
A comparison was made between the substitution model of application (see [[https://sarabander.github.io/sicp/html/1_002e1.xhtml#g_t1_002e1_002e5][SICP2e 1.1.5: The Substitution Model for Procedure Application]]) and the environment model of evaluation.
***** [[id:94023478-7ef7-4451-9564-02b356a81102][LISP 1.5 Programmer's Manual]]
***** [[id:9e65a3cb-c744-465e-b45d-c9494fddb701][(jmc.stanford.edu) History of Lisp]]
****** [[id:2cd55918-ce21-4dbb-9eb3-df648603c7ad][(jmc.stanford.edu) lisp.pdf]]
***** [[id:be8b671a-2bb0-4e85-8116-70e1ace8641c][Recursive functions of symbolic expressions and their computation by machine, Part I by John McCarthy]]
***** [[id:8e828444-d654-43f9-8430-1314204ced46][(texdraft.github.io) Lisp Compiler]]
***** [[id:b1f61a9c-1636-428c-b087-9bd5466253ad][(en.wikipedia.org) SHRDLU - Wikipedia]]
***** [[id:e86b5f48-7ae0-4cfe-a07b-4f1a2e59af5a][Paradigms of Artificial Intelligence Programming: Case Studies in Common Lisp by Peter Norvig]]
***** [[id:0d07302d-fb8a-4fd8-a795-5ee911adbf9c][(en.wikipedia.org) Cyc - Wikipedia]]
***** [[id:f1ccd506-3a34-48b8-aa11-2e3cbf6dde42][(www.wired.com) One Genius' Lonely Crusade to Teach a Computer Common Sense | WIRED]]
***** [[id:f07d1118-83d6-428f-beb8-081d6966f661][(www.wired.com) CYC-O | WIRED]]
***** [[id:760b78b3-1c9a-44a2-b0cf-d2ad0381dc79][IBM 704]]
**** Session Four, [2025-03-30 Sun 15:00-16:00]
***** [[id:4e6b6934-89b2-4125-b046-9628e20427e8][(sarabander.github.io) SICP, 2e: Chapter 2 Building Abstractions with Data]]
***** [[id:6d5c6805-fb40-49d9-9a91-93733bde2818][(sarabander.github.io) SICP, 2e: 2.1 Introduction to Data Abstraction]]
***** [[id:54ca1727-d685-4343-a0e3-3f07a815ea58][(sarabander.github.io) SICP, 2e: References]]
***** [[id:c49d3fa4-05a0-4df8-9edd-fbb28a98f9a3][(en.wikipedia.org) Hindley–Milner type system - Wikipedia]]
***** [[id:1ed495bd-4fa7-4386-820e-da7d8fa037fe][(en.wikipedia.org) Halting problem - Wikipedia]]
***** [[id:51ed60d6-72ac-421b-b7db-e0faab9f86cf][(en.wikipedia.org) Rice's theorem - Wikipedia]]
***** [[id:5dfe39dc-7d6c-47b9-ae2c-23e72e78ac2c][(en.wikipedia.org) Rice–Shapiro theorem - Wikipedia]]
***** [[id:269a61e7-1e3a-42f2-9749-cf15a6b20c3a][(en.wikipedia.org) Scott–Curry theorem - Wikipedia]]
***** [[id:a0860061-8e8d-4edc-9c47-f50c7aeeb168][(en.wikipedia.org) Haskell Curry - Wikipedia]]
***** [[id:5edf24bc-eeaa-465f-b90f-8565edbb600b][(en.wikipedia.org) Curry–Howard correspondence - Wikipedia]]
***** [[id:b60d88a6-5396-4183-ad7d-74919d13a39b][(nature-of-computation.org) The Nature Of Computation]]
***** [[id:84a83fd6-8983-49fa-8694-49a0ace2f4b0][(en.wikipedia.org) Mizar system - Wikipedia]]
***** [[id:266e410a-c16d-40b0-8c50-65e9df7efa26][(hbpms.blogspot.com) How to Become a Pure Mathematician (or Statistician)]]
***** [[id:305a0136-617f-4f2f-bd0b-d580e86c91ae][(en.wikipedia.org) Christos Papadimitriou - Publications - Wikipedia]]
***** [[id:113a0446-7ae1-4370-9c39-746e2295f877][(guix.gnu.org) GNU Guix transactional package manager and distribution — GNU Guix]]
***** [[id:5ae0698a-cef8-4068-8ec4-75dcfd9c83ea][(itch.io) Autumn Lisp Game Jam 2024 - itch.io]]
***** [[id:cd24e6d7-a28e-447d-a67f-94099f0c92b3][(www.youtube.com) Lambda Calculus: Introduction, Visualization, and Philosophy - YouTube]]
***** [[id:0922fa74-c7b0-44ea-a455-e5c3e6ce5971][(computationbook.com) Understanding Computation]]
***** [[id:8d68f948-3d87-4e39-a317-d174ab5c57a5][(web.archive.org) Lambda Diagrams]]
***** [[id:a17c4195-8144-4b01-9757-0733e1944e96][(en.wikipedia.org) To Mock a Mockingbird - Wikipedia]]
***** [[id:fe9d21d6-03f5-45be-9d34-87043416f808][Vimacs.app]]
***** [[id:7ea9bd38-5f1e-4d41-ae1c-563b16394205][(www.youtube.com) Self-Correcting Messages (Hamming Codes) - YouTube]]
***** [[id:4a08ee29-8b52-432f-b9ee-1e60f176011f][(www.youtube.com) Hamming Codes Part 2: The One-Line Implementation - YouTube]]
***** [[id:33292cf2-86a1-4693-b750-4f6ad96784a4][(press.stripe.com) Stripe Press — The Art of Doing Science and Engineering]]
***** [[id:5d8b7f8f-1b32-411b-a63f-628cfa0c4205][(hackernewsbooks.com) Hacker News Books]]
***** [[id:0a177b13-aecb-4f33-a45b-30b0b090614b][(www.oreilly.com) Designing Data-Intensive Applications, 2nd Edition[Book]​]]
***** Next time, [[id:183c1aa8-f3cb-4712-9a69-c218be056654][(sarabander.github.io) SICP, 2e: 2.2 Hierarchical Data and the Closure Property]]
**** Session Five, [2025-04-06 Sun 15:00-16:00]
***** Current section [[id:183c1aa8-f3cb-4712-9a69-c218be056654][(sarabander.github.io) SICP, 2e: 2.2 Hierarchical Data and the Closure Property]]
***** Examples of different Lisp structures using lists and cons cells
#+begin_src scheme
  ; Equivalent forms.
  (cons (list 1 2) (list 3 4))
  (cons (cons 1 (cons 2 nil)) (cons 3 (cons 4 nil)))

  ; Not equivalent to the former two forms.
  (list (list 1 2) (list 3 4))
#+end_src
***** [[id:82dac0a3-1609-43d4-ae80-1433e32ddfbb][(www.racket-lang.org) Racket]]
***** [[id:c8912c5d-d322-4a55-9541-e7df5f750b28][(sdf.org) SDF Public Access UNIX System - Free Shell Account and Shell Access]]
***** [[id:614d5dbe-cc84-406d-b4d8-eba7d8a66641][(physbuzz.github.io) notes-ch2-2.md]]
***** [[id:0ce8a637-9efa-436e-8b46-1a49b4d98f35][(linkencore.iii.com) Encore -- Functional design and architecture : examples in Haskell / Alexander Granin.]]
***** [[id:ccf03166-bdb6-4f78-90ae-e6f96696151f][(linkencore.iii.com) Encore -- Data-oriented programming : reduce software complexity / Yehonathan Sharvit ; forewords by Michael T. Nygard and Ryan Singer.]]
***** [[id:702f90d1-a9b0-4223-91ed-e92ed309d890][(www.amazon.com) Programming Algorithms in Lisp: Writing Efficient Programs with Examples in ANSI Common Lisp: Domkin, Vsevolod: 9781484264270: Amazon.com: Books]]
***** [[id:b4a1175c-cf6a-4de4-9d1a-2a338e46bd04][(www.amazon.com) Purely Functional Data Structures: Okasaki, Chris: 9780521663502: Amazon.com: Books]]
***** [[id:bb37502b-f9bf-48a9-b016-93f4ac3dfd84][(en.wikipedia.org) Matthias Felleisen - Wikipedia]]
***** [[id:40487582-bcbc-4e94-b8d7-f533a11a9313][(linkencore.iii.com) Encore -- The recursive book of recursion : ace the coding interview with Python and JavaScript / by Al Sweigart.]]
***** [[id:c9e9c3b6-d5c3-4d40-8c18-96afb274cbf6][(www.manning.com) Data-Oriented Programming]]
***** [[id:b1e828fb-6b65-4e6d-a6b4-aaea2b9e1740][(en.wikipedia.org) Tower of Hanoi - Wikipedia]]
***** [[id:e9c87192-3017-420b-94d7-7bcc1ff9ca41][(en.wikipedia.org) Eight queens puzzle - Wikipedia]]
***** [[id:734efbcc-68b3-4ffd-b8c2-5e607223aeb9][(mitpress.mit.edu) Structure and Interpretation of Classical Mechanics]]
****** [[id:82fb2c99-587e-4a6d-95a6-3472337c73d0][(mitp-content-server.mit.edu) Structure and Interpretation of Classical Mechanics]]
***** [[id:18cf776a-0540-4561-9e6d-03eef416fe2f][(www.amazon.com) Functional Differential Geometry (Mit Press): Sussman, Gerald Jay, Wisdom, Jack, Farr, Will: 9780262019347: Amazon.com: Books]]
***** [[id:77677999-a800-4b6f-aa71-81d6f65e3299][(nostarch.com) Learn Physics with Functional Programming | No Starch Press]]
***** [[id:c08a7cb1-2450-4a4a-8a2e-52ef1d331816][(nostarch.com) Hardcore Programming for Mechanical Engineers | No Starch Press]]
***** [[id:03937c91-d585-48a0-b8cf-208ac6c74b45][(stevelosh.com) August 2016 Lisp Game Jam Postmortem / Steve Losh]]
***** [[id:2f2bd676-b37a-4130-8e6b-cf11ae8b6f59][(rosettacode.org) Rosetta Code]]
***** [[id:dfbd1cf6-7a60-4177-bcc7-b32962208f15][(rosettacode.org) Category:Scheme - Rosetta Code]]
***** [[id:9b5f8541-85c4-4696-b9cb-dd719523d903][(www.manning.com) Grokking Functional Programming]]
***** [[id:2f8a5c51-c94f-492f-8049-458e7fadc4b5][(lispcookbook.github.io) Data structures]]
**** Study Session [2025-04-13 Sun 15:00-16:00]
Study session prior to §2.3 to allow more time to read and give extra time to discussing exercises.  Not streamed or recorded.  No host present.
**** Session Six, [2025-04-20 Sun 15:00-16:00]
Session recorded by an attendee, but not streamed.  No host present due to multiple schedule conflicts and last-minute obligations.
***** Current section [[id:e45e5e54-2625-4d00-9e48-0d1cb002d2e6][(sarabander.github.io) SICP, 2e: 2.3 Symbolic Data]]
**** Session Seven, [2025-04-27 Sun 15:00-16:00]
***** Current section [[id:b66aedcd-6879-4a7f-856f-4de22a9a7bcd][(sarabander.github.io) SICP, 2e: 2.4 Multiple Representations for Abstract Data]]
***** Property lists
***** Association lists
***** [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Association-Lists.html][Association Lists (GNU Emacs Lisp Reference Manual)]]
***** [[id:b9d5b964-d6c1-42e8-bed4-aa25935407c1][(www.cs.cmu.edu) 10.1. The Property List]]
***** [[id:b4c9a914-2a36-47b3-b4c1-cf44c6f806cb][(www.cs.cmu.edu) 15.6. Association Lists]]
***** [[id:4c84542d-5577-4d96-b59e-e18334703f56][(en.wikipedia.org) History - Object-oriented programming - Wikipedia]]
***** [[id:34e4ecb5-ef41-42cf-af05-2c7231998105][(cs61a.org) CS 61A Spring 2025]]
****** [[id:0a5f3d1d-8e20-4616-8cdd-90f817b959a7][(www.composingprograms.com) Composing Programs]]
***** [[id:8f73a589-db3d-4bff-84b4-19ce6510dae8][(www.brinckerhoff.org) CSC 430, Spring 2025]]
***** [[id:85990d99-ed08-4b06-b981-9d9d3c10f4cb][(www.cliki.net) CLiki: Current recommended libraries]]
****** [[id:787339e7-fc9e-41d8-b385-0212b145bef6][(alexandria.common-lisp.dev) Alexandria]]
******* [[id:564037ee-32f0-4b22-8f01-c22b745938dc][(gitlab.common-lisp.net) alexandria / alexandria · GitLab]]
******** [[id:3d72803f-e192-4ee5-a39a-fa73fcf21e80][(gitlab.common-lisp.net) alexandria.asd · master · alexandria / alexandria · GitLab]]
******** [[https://gitlab.common-lisp.net/alexandria/alexandria/-/blob/master/alexandria-1/arrays.lisp][alexandria-1/arrays.lisp · master · alexandria / alexandria · GitLab]]
******** [[https://gitlab.common-lisp.net/alexandria/alexandria/-/blob/master/alexandria-2/arrays.lisp][alexandria-2/arrays.lisp · master · alexandria / alexandria · GitLab]]
****** [[id:28293466-114e-4c1a-95ae-47b6f6b121ca][(docs.racket-lang.org) raco: Racket Command-Line Tools]]
****** [[id:ce62aeae-38ab-49cf-ba22-47b43ec97cb2][Quicklisp]]
****** [[id:9af45692-b2f1-4d4e-a9b3-03d355ffacd0][Guix]]
******* [[https://packages.guix.gnu.org/search/?query=guile][Search — Packages — GNU Guix]]
******** [[https://packages.guix.gnu.org/packages/guile-lzma/0.1.1/][guile-lzma 0.1.1 — Packages — GNU Guix]]
********* [[https://git.savannah.gnu.org/cgit/guix.git/tree/gnu/packages/guile.scm#n990][Line 990, (define-public guile-lzma...) guile.scm\packages\gnu - guix.git - GNU Guix and GNU Guix System]]
****** [[id:f6311b42-cf2d-490f-ac69-0075b82828b9][(www.gnu.org) Top (Guile Reference Manual)]]
****** [[id:dbb51b6f-3fb9-4f25-b1aa-76909e5a30f6][(en.wikipedia.org) Stalin (Scheme implementation) - Wikipedia]]
****** [[id:064be3a0-bb32-4312-9868-73e9c77ba7cf][Guile]]
****** [[id:4dce9bd1-c2b5-47ce-aded-2811e4b1ca2e][(wingolog.org) wingolog]]
****** [[id:788ac70b-c61b-414b-88ed-5be4177fc565][ASDF]]
****** [[id:ac3dda9e-bf08-4cab-9390-bd0cad22a907][R^7RS Chapter 6 Section 4: Pairs and Lists]]
***** Other books mentioned
****** [[id:de46d019-dd0c-46a9-aac8-575c01946098][Software Design for Flexibility: How to Avoid Programming Yourself into a Corner]]
****** [[id:01a6fd50-c5a7-449d-a43b-d1e32441ea96][(thelittletyper.com) The Little Typer]]
****** [[id:b436fdf8-1290-484f-becf-c369142a0b80][Essentials of Programming Languages]]
****** [[id:79183f27-34a0-4541-a761-de494362b19c][The Art of the Metaobject Protocol]]
****** [[id:c2d9b1d2-004e-447c-aea6-c979572806d7][Concepts, Techniques, and Models of Computer Programming]]
**** Session Eight, [2025-05-04 Sun 15:00-16:00]
***** Current section [[id:597e2dfe-3c20-4137-b005-390b5d614509][(sarabander.github.io) SICP, 2e: 2.5 Systems with Generic Operations]]
***** Native number types in Racket causing issues in implementing the examples in SICP
Racket has native fractions which messes with implementing some of the examples in SICP §2.5.
***** See also [[id:b66aedcd-6879-4a7f-856f-4de22a9a7bcd][(sarabander.github.io) SICP, 2e: 2.4 Multiple Representations for Abstract Data]] for definition, or lack thereof, of =apply-generic=, =put=, =get=
***** [[id:534896b8-bb7d-4603-9c55-c4803d6feeb0][(www.youtube.com) The Unreasonable Effectiveness of Multiple Dispatch | Stefan Karpinski | JuliaCon 2019 - YouTube]]
***** [[id:eb85baab-0f50-4825-81e5-c87cd6148665][(en.wikipedia.org) Expression problem - Wikipedia]]
***** [[id:836e3c3b-191d-47e7-9ef0-f2c9e3b51046][(www.juliaopt.org) 2019 JuMP-dev Keynote - stefan_karpinski.pdf]]
***** [[id:3d496345-f0c5-4f04-bb7e-ed7af607d571][(en.wikipedia.org) Numerical tower - Wikipedia]]
***** [[id:d8edf8ec-ea44-4603-9266-6084232c4d44][(en.wikipedia.org) The Diamond Problem - Multiple inheritance - Wikipedia]]
***** [[id:a2904658-1ceb-494b-b3b9-fc0889140872][(en.wikipedia.org) Python - Extending languages with multiple-dispatch libraries - Examples - Multiple dispatch - Wikipedia]]
***** [[id:3a79bf3b-f171-4794-9c0b-6b4cd4cf6b57][(en.wikipedia.org) Common Lisp Object System - Wikipedia]]
****** [[id:e48fca4d-6f9e-42a2-874a-0ca949a00db8][(en.wikipedia.org) Metaobject Protocol -  Metaobject - Wikipedia]]
***** [[id:7421929e-6baa-422b-b9e7-70e52df1ec3d][Greenspun's Tenth Rule]]
***** [[id:afb88a4f-487d-4291-8e24-49548b222646][(cs.brown.edu) The Structure and Interpretation of the Computer Science Curriculum (sics.dvi - paper.pdf)]]
***** [[id:5d0865bd-877f-4ca9-aaf4-691aaec4a3c1][(en.wikipedia.org) C++ - Emulating Multiple Dispatch - Examples - Multiple dispatch - Wikipedia]]
***** "Design patterns are what happens when you run out of language"
Seems to a mutation of Rich Hickey's
#+begin_quote
  Patterns mean "I have run out of language."
#+end_quote
which people seem to like quoting but not citing.
***** [[https://juliacon.org/2025/][JuliaCon 2025]]
***** [[id:eba3acf1-4582-49c4-b2af-4b66ac11437f][(sarabander.github.io) SICP, 2e: 2.5: Footnote #118]]
**** Session Nine, [2025-05-11 Sun 15:00-16:00]
***** [[id:c4efd117-2a1c-4066-844a-c7b6aaa13ac8][(sarabander.github.io) SICP, 2e: 3.1 Assignment and Local State]]
***** [[id:5eac4aa2-ab1e-44ae-bfd8-498e800d9a14][(sarabander.github.io) SICP, 2e: Term Index]]
***** [[id:acf32411-d75c-4303-8993-feaecc3d7429][(mathoverflow.net) algorithms - What is this modified arithmetico-geometric mean function? - MathOverflow]]
***** [[id:77e49f9f-c7c1-4829-b200-2aae2cacc14a][(mathstodon.xyz) Dan Piponi: "Sketch of proof based on paper…" - Mathstodon]]
***** [[id:49444189-1d98-43b7-b64c-2c31466c4734][(en.wikipedia.org) Side effect (computer science) - Wikipedia]]
****** [[id:712f13d2-7769-4807-864b-458f96125f6e][(en.wikipedia.org) Referential transparency - Wikipedia]]
****** [[id:0588feb7-8c43-476a-b55f-68d3b5761c77][(en.wikipedia.org) Idempotence - Wikipedia]]
****** [[id:b9e47c79-3620-43c1-8d2c-1ee05ea2c8d0][(en.wikipedia.org) Frame problem - Wikipedia]]
***** [[id:281a5050-627c-43ff-817b-1f2edeacbe97][(en.wikipedia.org) Algebraic data type - Wikipedia]]
***** [[id:08e14c51-227a-4d6c-ab9f-a6b0bdc993e3][(en.wikipedia.org) Abstract data type - Wikipedia]]
***** [[id:c85ec26d-5b42-4c3f-b5a7-16c53860025e][(elixirschool.com) Pipe Operator · Elixir School]]
***** [[id:91f3fe45-71ac-4d92-926e-c0058429763a][Crafting Interpreters by Robert Nystrom]]
***** [[id:f019fda3-5133-4cdb-b1c2-3361bbdd6782][(cacm.acm.org) A Programmable Programming Language – Communications of the ACM]]
**** Session Ten, [2025-05-18 Sun 15:00-16:00]
***** Current section [[id:45d86aec-1cbf-4562-b350-6787585091e7][(sarabander.github.io) SICP, 2e: 3.2 The Environment Model of Evaluation]]
***** [[id:8e72da0e-d883-46e3-bd1b-96dd985fe8ca][(www.youtube.com) Lecture 5A | MIT 6.001 Structure and Interpretation, 1986 - YouTube]]
***** [[id:feca9603-fe83-4e16-bfab-d323bb06bc2e][(www.youtube.com) L21 Assignment and State | UC Berkeley Cs 61A, Spring 2010 - YouTube]]
***** [[id:6959fcfb-f0c3-422f-bce0-9e9103888602][The Garbage Collection Handbook]]
***** Diagramming parallel vs series frames and environments
Was attempting to draw a diagram of parallel vs. series frames when defining nested and non-nested functions and when calling said functions.
***** [[id:87ce890e-e647-45c9-825f-c98c030d44af][Build Your Own Lisp]]
