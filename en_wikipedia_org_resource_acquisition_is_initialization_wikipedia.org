:PROPERTIES:
:ID:       50722fd9-a5bf-4cc0-80e2-2360bd28230e
:ROAM_REFS: https://en.wikipedia.org/wiki/Resource_acquisition_is_initialization
:END:
#+title: (en.wikipedia.org) Resource acquisition is initialization - Wikipedia
#+filetags: :programming_language_design:programming:computer_science:website:

#+begin_quote
  *Resource acquisition is initialization* (*RAII*) is a [[https://en.wikipedia.org/wiki/Programming_idiom][programming idiom]] used in several [[https://en.wikipedia.org/wiki/Object-oriented_programming][object-oriented]], [[https://en.wikipedia.org/wiki/Statically-typed_programming_language][statically typed]] programming languages to describe a particular language behavior.  In RAII, holding a resource is a [[https://en.wikipedia.org/wiki/Class_invariant][class invariant]], and is tied to [[https://en.wikipedia.org/wiki/Object_lifetime][object lifetime]]. [[https://en.wikipedia.org/wiki/Resource_allocation_(computer)][Resource allocation]] (or acquisition) is done during object creation (specifically initialization), by the [[https://en.wikipedia.org/wiki/Constructor_(object-oriented_programming)][constructor]], while resource deallocation (release) is done during object destruction (specifically finalization), by the [[https://en.wikipedia.org/wiki/Destructor_(computer_programming)][destructor]].  In other words, resource acquisition must succeed for initialization to succeed.  Thus, the resource is guaranteed to be held between when initialization finishes and finalization starts (holding the resources is a class invariant), and to be held only when the object is alive.  Thus, if there are no object leaks, there are no [[https://en.wikipedia.org/wiki/Resource_leak][resource leaks]].

  RAII is associated most prominently with [[https://en.wikipedia.org/wiki/C++][C++]], where it originated, but also [[https://en.wikipedia.org/wiki/Ada_(programming_language)][Ada]], [[https://en.wikipedia.org/wiki/Vala_(programming_language)][Vala]], and [[https://en.wikipedia.org/wiki/Rust_(programming_language)][Rust]].  The technique was developed for [[https://en.wikipedia.org/wiki/Exception_safety][exception-safe]] [[https://en.wikipedia.org/wiki/Resource_management_(computing)][resource management]] in C++ during 1984--1989, primarily by [[https://en.wikipedia.org/wiki/Bjarne_Stroustrup][Bjarne Stroustrup]] and [[https://en.wikipedia.org/wiki/Andrew_Koenig_(programmer)][Andrew Koenig]], and the term itself was coined by Stroustrup.

  Other names for this idiom include /Constructor Acquires, Destructor Releases/ (CADRe) and one particular style of use is called /Scope-based Resource Management/ (SBRM).  This latter term is for the special case of [[https://en.wikipedia.org/wiki/Automatic_variable][automatic variables]].  RAII ties resources to object /lifetime,/ which may not coincide with entry and exit of a scope. (Notably variables allocated on the [[https://en.wikipedia.org/wiki/Heap_(programming)][free store]] have lifetimes unrelated to any given scope.) However, using RAII for automatic variables (SBRM) is the most common use case.
#+end_quote
