:PROPERTIES:
:ID:       2b8e0e27-5754-468b-8ce4-f46a7805f80f
:ROAM_REFS: https://groups.csail.mit.edu/mac/users/gjs/propagators/
:END:
#+title: (groups.csail.mit.edu) Revised Report on the Propagator Model
#+filetags: :website:

#+begin_quote
  * Revised Report on the Propagator Model

  *Alexey Radul and Gerald Jay Sussman*

  --------------

  *** Abstract:

  In the past year we have made serious progress on elaborating the propagator programming model [[[https://groups.csail.mit.edu/mac/users/gjs/propagators/revised-html.html#art-thesis][2]],[[https://groups.csail.mit.edu/mac/users/gjs/propagators/revised-html.html#art][3]]].  Things have gotten serious enough to build a system that can be used for real experiments.

  The most important problem facing a programmer is the revision of an existing program to extend it for some new situation.  Unfortunately, the traditional models of programming provide little support for this activity.  The programmer often finds that commitments made in the existing code impede the extension, but the costs of reversing those commitments are excessive.

  Such commitments tend to take the form of choices of strategy.  In the design of any significant system there are many implementation plans proposed for every component at every level of detail.  However, in the system that is finally delivered this diversity of plans is lost and usually only one unified plan is adopted and implemented.  As in an ecological system, the loss of diversity in the traditional engineering process has serious consequences.

  The Propagator Programming Model is an attempt to mitigate this problem.  It is a model that supports the expression and integration of multiple viewpoints on a design.  It incorporates explicit structure to support the integration of redundant pieces and subsystems that solve problems in several different ways.  It will help us integrate the diversity that was inherent in the design process into the delivered operational product.

  The Propagator Programming Model is built on the idea that the basic computational elements are autonomous machines interconnected by shared cells through which they communicate.  Each machine continuously examines the cells it is interested in, and adds information to some based on computations it can make from information from the others.  Cells accumulate information from the propagators that produce that information.  The key idea here is additivity.  New ways to make contributions can be added just by adding new propagators; if an approach to a problem doesn't turn out to work well, it can be identified by its premises and ignored, dynamically and without disruption.
#+end_quote
