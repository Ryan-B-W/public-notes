:PROPERTIES:
:ID:       84ae6e85-a6a2-4133-bc53-274238081c2d
:END:
#+title: Lisp
#+filetags: :emacs:lisp:programming_language:programming:computer_science:

The Lisp [[id:b24601aa-09df-41e1-aa7e-25ead342db34][programming language]].  Originally short for LISt Processing.  Most commonly associated with [[id:b10990c2-d056-42f5-a4e7-145a405d9550][Artificial Intelligence]] and [[id:aca1324c-b142-4e34-a121-a8bb0a79ddf8][Emacs]].  There are many dialects of Lisp.  Most notable dialects are Common Lisp, Scheme, and Emacs Lisp (ELisp).  First invented in 1958 by Johan McCarthy who published his paper on the notation in 1960.  First implementation started in 1958 and was working around 1960.
* See Also
** (en.wikipedia.org) Lisp (programming language) - Wikipedia       :website:
:PROPERTIES:
:ID:       f03ed304-601d-4c5c-8e34-458281867b5b
:ROAM_REFS: https://en.wikipedia.org/wiki/Lisp_(programming_language)
:END:

#+begin_quote
  Lisp (historically LISP, an abbreviation of "list processing") is a family of programming languages with a long history and a distinctive, fully parenthesized prefix notation.  Originally specified in the late 1950s, it is the second-oldest high-level programming language still in common use, after Fortran.  Lisp has changed since its early days, and many dialects have existed over its history.  Today, the best-known general-purpose Lisp dialects are Common Lisp, Scheme, Racket, and Clojure.
  Lisp was originally created as a practical mathematical notation for computer programs, influenced by (though not originally derived from) the notation of Alonzo Church's lambda calculus.  It quickly became a favored programming language for artificial intelligence (AI) research.  As one of the earliest programming languages, Lisp pioneered many ideas in computer science, including tree data structures, automatic storage management, dynamic typing, conditionals, higher-order functions, recursion, the self-hosting compiler, and the read–eval–print loop.
  The name LISP derives from "LISt Processor".  Linked lists are one of Lisp's major data structures, and Lisp source code is made of lists.  Thus, Lisp programs can manipulate source code as a data structure, giving rise to the macro systems that allow programmers to create new syntax or new domain-specific languages embedded in Lisp.
  The interchangeability of code and data gives Lisp its instantly recognizable syntax.  All program code is written as s-expressions, or parenthesized lists.  A function call or syntactic form is written as a list with the function or operator's name first, and the arguments following; for instance, a function f that takes three arguments would be called as ~(f arg1 arg2 arg3)~.
#+end_quote
** [[http://jmc.stanford.edu/articles/lisp/lisp.pdf][History of Lisp, Johan McCarthy 1979]]
