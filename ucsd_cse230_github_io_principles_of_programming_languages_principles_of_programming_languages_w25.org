:PROPERTIES:
:ID:       d82fc65b-f168-4eaf-b1da-8d08652a8efe
:ROAM_REFS: https://ucsd-cse230.github.io/wi25/
:END:
#+title: (ucsd-cse230.github.io) Principles of Programming Languages - Principles of Programming Languages - W25
#+filetags: :website:

#+begin_quote
  * CSE 230: Principles of Programming Languages CSE 230

  ** Summary

  CSE 230 is an introduction to the Semantics of Programming Languages. Unlike most engineering artifacts, programming languages and hence, programs are /mathematical objects/ whose properties can be formalized. The goal of CSE 230 is to to introduce you to the fundamental /mental/ and /mechanical/ tools required to rigorously analyze languages and programs and to expose you to recent developments in and applications of these techniques/

  We shall study /operational/ and /axiomatic/ semantics, two different ways of precisely capturing the meaning of programs by characterizing their executions.

  We will see how the /lambda calculus/ can be used to distill essence of computation into a few powerful constructs.

  We use that as a launching pad to study expressive /type systems/ useful for for analyzing the behavior of programs at compile-time.

  We will study all of the above in the context of [[https://lean-lang.org/][lean]], an interactive proof assistant that will help us precisely formalize and verify our intuitions about languages and their semantics.

  Students will be evaluated on the basis of 4-6 programming (proving!) assignments, and a final exam.

  ** Prerequisites

  Basic functional programming e.g. as taught in [[https://ucsd-cse130.github.io/wi24][UCSD CSE 130]] using languages like Haskell, OCaml, Scala, Rust, and undergraduate level discrete mathematics, i.e. logic, sets, relations.
#+end_quote

#+begin_quote
  ** Resources

  The course is loosely based on [[http://www.concrete-semantics.org/][Concrete Semantics]] but there is no official textbook; we will link to any relevant resources that may be needed to supplement the lecture material.

  - [[https://github.com/ucsd-cse230/wi25/tree/main/code][Code from lecture]]

  Some other useful links are:

  - [[https://lean-lang.org/][Lean]]
  - [[https://lean-lang.org/theorem_proving_in_lean4/][Theorem Proving in Lean4]]
  - [[http://www.concrete-semantics.org/][Concrete Semantics]]
  - [[https://softwarefoundations.cis.upenn.edu/][Software Foundations]]
  - [[https://lean-forward.github.io/hitchhikers-guide/2023/][Hitchhikers Guide to Logical Verification]]
  - [[https://plfa.github.io/][PL Foundations in Agda]]
#+end_quote

#+begin_quote
  ** Schedule

  The schedule below outlines topics, due dates, and links to assignments. The schedule of lecture topics might change slightly, but I post a general plan so you can know roughly where we are headed.

  *** Week 1 - Basics and Induction

  - [[https://ucsd-cse230.github.io/wi25/lectures/L00Hello.html][Hello!]]
  - [[https://ucsd-cse230.github.io/wi25/lectures/L01Expressions.html][Expressions and Types]]
  - [[https://ucsd-cse230.github.io/wi25/lectures/L02Datatypes.html][Datatypes and Polymorphism]]

  *** Week 2 - Expressions and Evidence

  - [[https://ucsd-cse230.github.io/wi25/lectures/L03Induction.html][Recursion and Induction]]
  - [[https://ucsd-cse230.github.io/wi25/static/230-handout-1-14.pdf][Handout 1-14]]
  - Compiling Expressions to Stack Machines (Ch03)

  *** Week 3 - Big Step Semantics

  - Induction on Evidence (Ch04)
  - Imperative Programs: States, Commands, Transitions
  - Program Equivalence (Ch07)

  *** Week 4 - Small Step Semantics

  - Preservation and Progress (Ch09)

  *** Week 5, 6 - Axiomatic Semantics

  - Assertions, Floyd-Hoare Logic, Soundness (Ch12)
  - Verification Conditions and Automatic Verification

  *** Week 7, 8 - Simply Typed Lambda Calculus

  - Terms, Types, and Typing Rules
  - Denotational Semantics and Type Soundness

  *** Week 9, 10 - Automated Verification

  - Satisfiability Modulo Theories
  - Flux: Refinement Type based verification for Rust
#+end_quote
