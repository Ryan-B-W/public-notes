:PROPERTIES:
:ID:       c980a340-2564-437e-a79f-388122a206ad
:ROAM_ALIASES: "Instruction Set Architecture" ISA
:END:
#+title: Instruction Set Architecture (ISA)
#+filetags: :computer_architecture:computer_science:

An abstract model of the execution and operation of a computer or family of computers.
* (en.wikipedia.org) Instruction set architecture - Wikipedia       :website:
:PROPERTIES:
:ID:       5e4e5f65-55e0-43e3-870c-7034fe27df1f
:ROAM_REFS: https://en.wikipedia.org/wiki/Instruction_set_architecture
:END:

#+begin_quote
  In [[https://en.wikipedia.org/wiki/Computer_science][computer science]], an *instruction set architecture* (*ISA*) is an [[https://en.wikipedia.org/wiki/Conceptual_model][abstract model]] that generally defines how [[https://en.wikipedia.org/wiki/Software][software]] controls the [[https://en.wikipedia.org/wiki/Central_processing_unit][CPU]] in a computer or a family of computers.  A device or program that executes instructions described by that ISA, such as a central processing unit (CPU), is called an /[[https://en.wikipedia.org/wiki/Implementation][implementation]]/ of that ISA.

  In general, an ISA defines the supported [[https://en.wikipedia.org/wiki/Machine_code][instructions]], [[https://en.wikipedia.org/wiki/Data_type][data types]], [[https://en.wikipedia.org/wiki/Register_(computer)][registers]], the hardware support for managing [[https://en.wikipedia.org/wiki/Computer_memory][main memory]],^{[/[[https://en.wikipedia.org/wiki/Wikipedia:Please_clarify][clarification needed]]/]} fundamental features (such as the [[https://en.wikipedia.org/wiki/Memory_consistency][memory consistency]], [[https://en.wikipedia.org/wiki/Addressing_mode][addressing modes]], [[https://en.wikipedia.org/wiki/Virtual_memory][virtual memory]]), and the [[https://en.wikipedia.org/wiki/Input/output][input/output]] model of implementations of the ISA.

  An ISA specifies the behavior of [[https://en.wikipedia.org/wiki/Machine_code][machine code]] running on implementations of that ISA in a fashion that does not depend on the characteristics of that implementation, providing [[https://en.wikipedia.org/wiki/Binary_compatibility][binary compatibility]] between implementations.  This enables multiple implementations of an ISA that differ in characteristics such as [[https://en.wikipedia.org/wiki/Computer_performance][performance]], physical size, and monetary cost (among other things), but that are capable of running the same machine code, so that a lower-performance, lower-cost machine can be replaced with a higher-cost, higher-performance machine without having to replace software.  It also enables the evolution of the [[https://en.wikipedia.org/wiki/Microarchitecture][microarchitectures]] of the implementations of that ISA, so that a newer, higher-performance implementation of an ISA can run software that runs on previous generations of implementations.

  If an [[https://en.wikipedia.org/wiki/Operating_system][operating system]] maintains a standard and compatible [[https://en.wikipedia.org/wiki/Application_binary_interface][application binary interface]] (ABI) for a particular ISA, machine code will run on future implementations of that ISA and operating system.  However, if an ISA supports running multiple operating systems, it does not guarantee that machine code for one operating system will run on another operating system, unless the first operating system supports running machine code built for the other operating system.

  An ISA can be extended by adding instructions or other capabilities, or adding support for larger addresses and data values; an implementation of the extended ISA will still be able to execute [[https://en.wikipedia.org/wiki/Machine_code][machine code]] for versions of the ISA without those extensions.  Machine code using those extensions will only run on implementations that support those extensions.

  The binary compatibility that they provide makes ISAs one of the most fundamental abstractions in [[https://en.wikipedia.org/wiki/Computing][computing]].
#+end_quote
