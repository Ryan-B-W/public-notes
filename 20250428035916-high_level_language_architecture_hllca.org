:PROPERTIES:
:ID:       5c3575fd-40a0-49bb-8be0-4f9e6d9a6024
:ROAM_ALIASES: "High-Level Language Computer Architecture" HLLCA
:END:
#+title: High-Level Language Computer Architecture (HLLCA)
#+filetags: :computer_architecture:computer_science:

A [[id:c980a340-2564-437e-a79f-388122a206ad][computer architecture]] that targets a specific high-level [[id:b24601aa-09df-41e1-aa7e-25ead342db34][programming language]].  Contrast with [[id:321ba3cc-d73a-4620-88f7-2527cbae1aac][RISC]] and [[id:96b6fc36-5b86-4108-b2b4-39b85a38f385][CISC]].  An example of an HLLCA would be a [[id:8ce62e39-7f9b-4932-972a-654a64b11900][Lisp Machine]].
* (en.wikipedia.org) High-level language computer architecture - Wikipedia :website:
:PROPERTIES:
:ID:       fe729749-19cc-421f-8812-6ffbe89455af
:ROAM_REFS: https://en.wikipedia.org/wiki/High-level_language_computer_architecture
:END:

#+begin_quote
  A *high-level language computer architecture* (*HLLCA*) is a [[https://en.wikipedia.org/wiki/Computer_architecture][computer architecture]] designed to be targeted by a specific [[https://en.wikipedia.org/wiki/High-level_programming_language][high-level programming language]] (HLL), rather than the architecture being dictated by hardware considerations.  It is accordingly also termed *language-directed computer design*, coined in [[https://en.wikipedia.org/wiki/High-level_language_computer_architecture#CITEREFMcKeeman1967][McKeeman (1967)]] and primarily used in the 1960s and 1970s.  HLLCAs were popular in the 1960s and 1970s, but largely disappeared in the 1980s.  This followed the dramatic failure of the [[https://en.wikipedia.org/wiki/Intel_432][Intel 432]] (1981) and the emergence of [[https://en.wikipedia.org/wiki/Optimizing_compiler][optimizing compilers]] and [[https://en.wikipedia.org/wiki/Reduced_instruction_set_computer][reduced instruction set computer]] (RISC) architectures and RISC-like [[https://en.wikipedia.org/wiki/Complex_instruction_set_computer][complex instruction set computer]] (CISC) architectures, and the later development of [[https://en.wikipedia.org/wiki/Just-in-time_compilation][just-in-time compilation]] (JIT) for HLLs.  A detailed survey and critique can be found in [[https://en.wikipedia.org/wiki/High-level_language_computer_architecture#CITEREFDitzelPatterson1980][Ditzel & Patterson (1980)]].

  HLLCAs date almost to the beginning of HLLs, in the [[https://en.wikipedia.org/wiki/Burroughs_large_systems][Burroughs large systems]] (1961), which were designed for [[https://en.wikipedia.org/wiki/ALGOL_60][ALGOL 60]] (1960), one of the first HLLs.  The best known HLLCAs may be the [[https://en.wikipedia.org/wiki/Lisp_machine][Lisp machines]] of the 1970s and 1980s, for the language [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]] (1959).  At present the most popular HLLCAs are [[https://en.wikipedia.org/wiki/Java_processor][Java processors]], for the language [[https://en.wikipedia.org/wiki/Java_(programming_language)][Java]] (1995), and these are a qualified success, being used for certain applications.  A recent architecture in this vein is the [[https://en.wikipedia.org/wiki/Heterogeneous_System_Architecture][Heterogeneous System Architecture]] (2012), which [[https://en.wikipedia.org/wiki/HSA_Intermediate_Layer][HSA Intermediate Layer]] (HSAIL) provides instruction set support for HLL features such as exceptions and virtual functions; this uses JIT to ensure performance.
#+end_quote
