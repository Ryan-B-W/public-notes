:PROPERTIES:
:ID:       2b674c22-8ea8-4da1-b374-2aa2990e9293
:ROAM_REFS: https://sarabander.github.io/sicp/html/index.xhtml
:END:
#+title: (sarabander.github.io) Structure and Interpretation of Computer Programs, 2e: Top
#+filetags: :scheme:lisp:programming:computer_science:books:website:

Main node: [[id:69d3e2e7-62dc-414f-90ee-86f4b4abbcb0][(sarabander.github.io) Structure and Interpretation of Computer Programs, 2e]].
#+begin_quote
  * Structure and Interpretation of Computer Programs, Second Edition

  Unofficial Texinfo Format 2.andresraba6.6

  *Harold Abelson and Gerald Jay Sussman with Julie Sussman, foreword by Alan J. Perlis*
#+end_quote
* (sarabander.github.io) SICP, 2e: Chapter 1 Building Abstractions with Procedures
:PROPERTIES:
:ID:       d9bdefb7-f325-4605-9a5a-c965263e2390
:ROAM_REFS: https://sarabander.github.io/sicp/html/Chapter-1.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 1.1 The Elements of Programming
:PROPERTIES:
:ID:       b85b9acb-443c-4d3f-842b-1f663c99ef18
:ROAM_REFS: https://sarabander.github.io/sicp/html/1_002e1.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 1.2 Procedures and the Processes They Generate
:PROPERTIES:
:ID:       d4e8ce6b-05bb-4338-b3ff-1bb12c109dea
:ROAM_REFS: https://sarabander.github.io/sicp/html/1_002e2.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 1.3 Formulating Abstractions with Higher-Order Procedures
:PROPERTIES:
:ID:       10ed2665-130f-4398-8efa-ce9795584da0
:ROAM_REFS: https://sarabander.github.io/sicp/html/1_002e3.xhtml
:END:
* (sarabander.github.io) SICP, 2e: Chapter 2 Building Abstractions with Data
:PROPERTIES:
:ID:       4e6b6934-89b2-4125-b046-9628e20427e8
:ROAM_REFS: https://sarabander.github.io/sicp/html/Chapter-2.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 2.1 Introduction to Data Abstraction
:PROPERTIES:
:ID:       6d5c6805-fb40-49d9-9a91-93733bde2818
:ROAM_REFS: https://sarabander.github.io/sicp/html/2_002e1.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 2.2 Hierarchical Data and the Closure Property
:PROPERTIES:
:ID:       183c1aa8-f3cb-4712-9a69-c218be056654
:ROAM_REFS: https://sarabander.github.io/sicp/html/2_002e2.xhtml
:END:
*** (sarabander.github.io) SICP, 2e: 2.2, Footnote 72
:PROPERTIES:
:ID:       2edf6633-4e65-4ebd-81c3-a842cb759479
:ROAM_REFS: https://sarabander.github.io/sicp/html/2_002e2.xhtml#FOOT72
:END:

#+begin_quote
  [[https://sarabander.github.io/sicp/html/2_002e2.xhtml#DOCF72][^{72}]] The use of the word “closure” here comes from abstract algebra, where a set of elements is said to be closed under an operation if applying the operation to elements in the set produces an element that is again an element of the set.  The Lisp community also (unfortunately) uses the word “closure” to describe a totally unrelated concept: A closure is an implementation technique for representing procedures with free variables.  We do not use the word “closure” in this second sense in this book.
#+end_quote
** (sarabander.github.io) SICP, 2e: 2.3 Symbolic Data
:PROPERTIES:
:ID:       e45e5e54-2625-4d00-9e48-0d1cb002d2e6
:ROAM_REFS: https://sarabander.github.io/sicp/html/2_002e3.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 2.4 Multiple Representations for Abstract Data
:PROPERTIES:
:ID:       b66aedcd-6879-4a7f-856f-4de22a9a7bcd
:ROAM_REFS: https://sarabander.github.io/sicp/html/2_002e4.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 2.5 Systems with Generic Operations
:PROPERTIES:
:ID:       597e2dfe-3c20-4137-b005-390b5d614509
:ROAM_REFS: https://sarabander.github.io/sicp/html/2_002e5.xhtml
:END:
*** (sarabander.github.io) SICP, 2e: 2.5, Footnote 118
:PROPERTIES:
:ID:       eba3acf1-4582-49c4-b2af-4b66ac11437f
:ROAM_REFS: https://sarabander.github.io/sicp/html/2_002e5.xhtml#FOOT118
:END:

#+begin_quote
  This statement, which also appears in the first edition of this book, is just as true now as it was when we wrote it twelve years ago.  Developing a useful, general framework for expressing the relations among different types of entities (what philosophers call “ontology”) seems intractably difficult.  The main difference between the confusion that existed ten years ago and the confusion that exists now is that now a variety of inadequate ontological theories have been embodied in a plethora of correspondingly inadequate programming languages.  For example, much of the complexity of object-oriented programming languages---and the subtle and confusing differences among contemporary object-oriented languages---centers on the treatment of generic operations on interrelated types.  Our own discussion of computational objects in [[https://sarabander.github.io/sicp/html/Chapter-3.xhtml#Chapter-3][Chapter 3]] avoids these issues entirely.  Readers familiar with object-oriented programming will notice that we have much to say in chapter 3 about local state, but we do not even mention “classes” or “inheritance.”  In fact, we suspect that these problems cannot be adequately addressed in terms of computer-language design alone, without also drawing on work in knowledge representation and automated reasoning.
#+end_quote
* (sarabander.github.io) SICP, 2e: Chapter 3 Modularity, Objects, and State
:PROPERTIES:
:ID:       5181afc7-8056-4a0b-9f8b-9e5c1908a0e5
:ROAM_REFS: https://sarabander.github.io/sicp/html/Chapter-3.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 3.1 Assignment and Local State
:PROPERTIES:
:ID:       c4efd117-2a1c-4066-844a-c7b6aaa13ac8
:ROAM_REFS: https://sarabander.github.io/sicp/html/3_002e1.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 3.2 The Environment Model of Evaluation
:PROPERTIES:
:ID:       45d86aec-1cbf-4562-b350-6787585091e7
:ROAM_REFS: https://sarabander.github.io/sicp/html/3_002e2.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 3.3 Modeling with Mutable Data
:PROPERTIES:
:ID:       29b23078-07a0-470c-a8f9-ba522c99f0ff
:ROAM_REFS: https://sarabander.github.io/sicp/html/3_002e3.xhtml
:END:
*** (sarabander.github.io) SICP, 2e: 3.3, Footnote 148
:PROPERTIES:
:ID:       a28f0383-3559-47db-8823-b329b017c2f0
:ROAM_REFS: https://sarabander.github.io/sicp/html/3_002e3.xhtml#FOOT148
:END:

#+begin_quote
  The subtleties of dealing with sharing of mutable data objects reflect the underlying issues of “sameness” and “change” that were raised in [[https://sarabander.github.io/sicp/html/3_002e1.xhtml#g_t3_002e1_002e3][3.1.3]].  We mentioned there that admitting change to our language requires that a compound object must have an “identity” that is something different from the pieces from which it is composed.  In Lisp, we consider this “identity” to be the quality that is tested by =eq?=, i.e., by equality of pointers.  Since in most Lisp implementations a pointer is essentially a memory address, we are “solving the problem” of defining the identity of objects by stipulating that a data object “itself” is the information stored in some particular set of memory locations in the computer.  This suffices for simple Lisp programs, but is hardly a general way to resolve the issue of “sameness” in computational models.
#+end_quote
** (sarabander.github.io) SICP, 2e: 3.4 Concurrency: Time Is of the Essence
:PROPERTIES:
:ID:       3d0e4610-7589-43ae-9c35-ecac837c09fb
:ROAM_REFS: https://sarabander.github.io/sicp/html/3_002e4.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 3.5 Streams
:PROPERTIES:
:ID:       54d70486-2673-4a0e-81a4-0e31bd047b13
:ROAM_REFS: https://sarabander.github.io/sicp/html/3_002e5.xhtml
:END:
*** (sarabander.github.io) SICP, 2e: 3.5, Footnote 186
:PROPERTIES:
:ID:       b0cc674c-8490-4af4-a228-cd41e051a100
:ROAM_REFS: https://sarabander.github.io/sicp/html/3_002e5.xhtml#FOOT186
:END:

#+begin_quote
  There are many possible implementations of streams other than the one described in this section.  Delayed evaluation, which is the key to making streams practical, was inherent in Algol 60's /call-by-name/ parameter-passing method.  The use of this mechanism to implement streams was first described by [[https://sarabander.github.io/sicp/html/References.xhtml#Landin-_00281965_0029][Landin (1965)]].  Delayed evaluation for streams was introduced into Lisp by [[https://sarabander.github.io/sicp/html/References.xhtml#Friedman-and-Wise-_00281976_0029][Friedman and Wise (1976)]].  In their implementation, =cons= always delays evaluating its arguments, so that lists automatically behave as streams.  The memoizing optimization is also known as /call-by-need/.  The Algol community would refer to our original delayed objects as /call-by-name thunks/ and to the optimized versions as /call-by-need thunks/.
#+end_quote
*** (sarabander.github.io) SICP, 2e: 3.5, Footnote 200
:PROPERTIES:
:ID:       f23ccb01-9834-4270-9157-e6892a892293
:ROAM_REFS: https://sarabander.github.io/sicp/html/3_002e5.xhtml#FOOT200
:END:

#+begin_quote
  This is a small reflection, in Lisp, of the difficulties that conventional strongly typed languages such as Pascal have in coping with higher-order procedures.  In such languages, the programmer must specify the data types of the arguments and the result of each procedure: number, logical value, sequence, and so on.  Consequently, we could not express an abstraction such as “map a given procedure =proc= over all the elements in a sequence” by a single higher-order procedure such as =stream-map=.  Rather, we would need a different mapping procedure for each different combination of argument and result data types that might be specified for a =proc=.  Maintaining a practical notion of “data type” in the presence of higher-order procedures raises many difficult issues.  One way of dealing with this problem is illustrated by the language ML ([[https://sarabander.github.io/sicp/html/References.xhtml#Gordon-et-al_002e-1979][Gordon et al. 1979]]), whose “polymorphic data types” include templates for higher-order transformations between data types.  Moreover, data types for most procedures in ML are never explicitly declared by the programmer.  Instead, ML includes a /type-inferencing/ mechanism that uses information in the environment to deduce the data types for newly defined procedures.
#+end_quote
*** (sarabander.github.io) SICP, 2e: 3.5, Footnote 204
:PROPERTIES:
:ID:       77a8ed9a-c63c-4f59-b1eb-71bdcf057070
:ROAM_REFS: https://sarabander.github.io/sicp/html/3_002e5.xhtml#FOOT204
:END:

#+begin_quote
  The object model approximates the world by dividing it into separate pieces.  The functional model does not modularize along object boundaries.  The object model is useful when the unshared state of the “objects” is much larger than the state that they share.  An example of a place where the object viewpoint fails is quantum mechanics, where thinking of things as individual particles leads to paradoxes and confusions.  Unifying the object view with the functional view may have little to do with programming, but rather with fundamental epistemological issues.
#+end_quote
* (sarabander.github.io) SICP, 2e: Chapter 4 Metalinguistic Abstraction
:PROPERTIES:
:ID:       f357dc09-7f5c-4617-b488-7e5581610a81
:ROAM_REFS: https://sarabander.github.io/sicp/html/Chapter-4.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 4.1 The Metacircular Evaluator
:PROPERTIES:
:ID:       bf2fb2a1-46ab-4e61-9224-5e92d399cb97
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e1.xhtml
:END:
*** (sarabander.github.io) SICP, 2e: 4.1, Footnote 213
:PROPERTIES:
:ID:       80f32e87-a766-47c0-b698-8597076a382f
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e1.xhtml#FOOT213
:END:

#+begin_quote
  As mentioned in [[https://sarabander.github.io/sicp/html/2_002e3.xhtml#g_t2_002e3_002e1][2.3.1]], the evaluator sees a quoted expression as a list beginning with =quote=, even if the expression is typed with the quotation mark.  For example, the expression ='a= would be seen by the evaluator as =(quote a)=.  See [[https://sarabander.github.io/sicp/html/2_002e3.xhtml#Exercise-2_002e55][Exercise 2.55]].
#+end_quote
*** (sarabander.github.io) SICP, 2e: 4.1, Footnote 228
:PROPERTIES:
:ID:       cf030a97-abaa-4a87-abc0-6305374b5166
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e1.xhtml#FOOT228
:END:

#+begin_quote
  Wanting programs to not depend on this evaluation mechanism is the reason for the “management is not responsible” remark in [[https://sarabander.github.io/sicp/html/1_002e1.xhtml#Footnote-28][Footnote 28]] of [[https://sarabander.github.io/sicp/html/Chapter-1.xhtml#Chapter-1][Chapter 1]].  By insisting that internal definitions come first and do not use each other while the definitions are being evaluated, the IEEE standard for Scheme leaves implementors some choice in the mechanism used to evaluate these definitions.  The choice of one evaluation rule rather than another here may seem like a small issue, affecting only the interpretation of “badly formed” programs.  However, we will see in [[https://sarabander.github.io/sicp/html/5_002e5.xhtml#g_t5_002e5_002e6][5.5.6]] that moving to a model of simultaneous scoping for internal definitions avoids some nasty difficulties that would otherwise arise in implementing a compiler.
#+end_quote
*** (sarabander.github.io) SICP, 2e: 4.1, Footnote 232
:PROPERTIES:
:ID:       8dcad8c9-1dd2-49b8-9ca7-97fe8a246529
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e1.xhtml#FOOT232
:END:

#+begin_quote
  This technique is an integral part of the compilation process, which we shall discuss in [[https://sarabander.github.io/sicp/html/Chapter-5.xhtml#Chapter-5][Chapter 5]].  Jonathan Rees wrote a Scheme interpreter like this in about 1982 for the T project ([[https://sarabander.github.io/sicp/html/References.xhtml#Rees-and-Adams-1982][Rees and Adams 1982]]).  Marc [[https://sarabander.github.io/sicp/html/References.xhtml#Feeley-_00281986_0029][Feeley (1986)]] (see also [[https://sarabander.github.io/sicp/html/References.xhtml#Feeley-and-Lapalme-1987][Feeley and Lapalme 1987]]) independently invented this technique in his master's thesis.
#+end_quote
** (sarabander.github.io) SICP, 2e: 4.2 Variations on a Scheme — Lazy Evaluation
:PROPERTIES:
:ID:       b01f3776-c3ea-430a-8df3-723db559fa6b
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e2.xhtml
:END:
*** (sarabander.github.io) SICP, 2e: 4.2, Footnote 238
:PROPERTIES:
:ID:       57b03469-0372-49ca-b0ff-853279cbda16
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e2.xhtml#FOOT238
:END:

#+begin_quote
  The word /thunk/ was invented by an informal working group that was discussing the implementation of call-by-name in Algol 60. They observed that most of the analysis of (“thinking about”) the expression could be done at compile time; thus, at run time, the expression would already have been “thunk” about ([[https://sarabander.github.io/sicp/html/References.xhtml#Ingerman-et-al_002e-1960][Ingerman et al. 1960]]).
#+end_quote
*** (sarabander.github.io) SICP, 2e: 4.2, Footnote 239
:PROPERTIES:
:ID:       0d6b37b2-0188-495e-8df9-f7fbdff7cdf9
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e2.xhtml#FOOT239
:END:

#+begin_quote
  This is analogous to the use of =force= on the delayed objects that were introduced in [[https://sarabander.github.io/sicp/html/Chapter-3.xhtml#Chapter-3][Chapter 3]] to represent streams.  The critical difference between what we are doing here and what we did in [[https://sarabander.github.io/sicp/html/Chapter-3.xhtml#Chapter-3][Chapter 3]] is that we are building delaying and forcing into the evaluator, and thus making this uniform and automatic throughout the language.
#+end_quote
*** (sarabander.github.io) SICP, 2e: 4.2, Footnote 240
:PROPERTIES:
:ID:       73a012e2-88e4-4c06-8e46-dfab714c2d0e
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e2.xhtml#FOOT240
:END:

#+begin_quote
  Lazy evaluation combined with memoization is sometimes referred to as /call-by-need/ argument passing, in contrast to /call-by-name/ argument passing.  (Call-by-name, introduced in Algol 60, is similar to non-memoized lazy evaluation.)  As language designers, we can build our evaluator to memoize, not to memoize, or leave this an option for programmers ([[https://sarabander.github.io/sicp/html/4_002e2.xhtml#Exercise-4_002e31][Exercise 4.31]]).  As you might expect from [[https://sarabander.github.io/sicp/html/Chapter-3.xhtml#Chapter-3][Chapter 3]], these choices raise issues that become both subtle and confusing in the presence of assignments.  (See [[https://sarabander.github.io/sicp/html/4_002e2.xhtml#Exercise-4_002e27][Exercise 4.27]] and [[https://sarabander.github.io/sicp/html/4_002e2.xhtml#Exercise-4_002e29][Exercise 4.29]].)  An excellent article by [[https://sarabander.github.io/sicp/html/References.xhtml#Clinger-_00281982_0029][Clinger (1982)]] attempts to clarify the multiple dimensions of confusion that arise here.
#+end_quote
*** (sarabander.github.io) SICP, 2e: 4.2, Footnote 241
:PROPERTIES:
:ID:       ca6cd248-5759-4656-8511-6f2eca9460ee
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e2.xhtml#FOOT241
:END:

#+begin_quote
  Notice that we also erase the =env= from the thunk once the expression's value has been computed.  This makes no difference in the values returned by the interpreter.  It does help save space, however, because removing the reference from the thunk to the =env= once it is no longer needed allows this structure to be /garbage-collected/ and its space recycled, as we will discuss in [[https://sarabander.github.io/sicp/html/5_002e3.xhtml#g_t5_002e3][5.3]].

  Similarly, we could have allowed unneeded environments in the memoized delayed objects of [[https://sarabander.github.io/sicp/html/3_002e5.xhtml#g_t3_002e5_002e1][3.5.1]] to be garbage-collected, by having =memo-proc= do something like =(set! proc '())= to discard the procedure =proc= (which includes the environment in which the =delay= was evaluated) after storing its value.
#+end_quote
** (sarabander.github.io) SICP, 2e: 4.3 Variations on a Scheme — Nondeterministic Computing
:PROPERTIES:
:ID:       da4c3b80-24fe-4817-8443-87a1ccee7910
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e3.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 4.4 Logic Programming
:PROPERTIES:
:ID:       dfb7cf86-1daa-4b28-9c43-1d8026b1a970
:ROAM_REFS: https://sarabander.github.io/sicp/html/4_002e4.xhtml
:END:
* (sarabander.github.io) SICP, 2e: Chapter 5 Computing with Register Machines
:PROPERTIES:
:ID:       172ddc04-d76f-4b00-ae7d-b74f48af5d16
:ROAM_REFS: https://sarabander.github.io/sicp/html/Chapter-5.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 5.1 Designing Register Machines
:PROPERTIES:
:ID:       a179b468-af99-43b8-9372-f0921f9a55b0
:ROAM_REFS: https://sarabander.github.io/sicp/html/5_002e1.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 5.2 A Register-Machine Simulator
:PROPERTIES:
:ID:       fa25c4ee-3b19-4cbb-89d4-ef50b05f01f2
:ROAM_REFS: https://sarabander.github.io/sicp/html/5_002e2.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 5.3 Storage Allocation and Garbage Collection
:PROPERTIES:
:ID:       cf76bb72-62a0-4942-97df-4b70582e7c52
:ROAM_REFS: https://sarabander.github.io/sicp/html/5_002e3.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 5.4 The Explicit-Control Evaluator
:PROPERTIES:
:ID:       1c11db84-5c96-4df9-b4b9-79de9b0e42e1
:ROAM_REFS: https://sarabander.github.io/sicp/html/5_002e4.xhtml
:END:
** (sarabander.github.io) SICP, 2e: 5.5 Compilation
:PROPERTIES:
:ID:       eecde4f8-9302-4eb7-a09b-6ee1217b3414
:ROAM_REFS: https://sarabander.github.io/sicp/html/5_002e5.xhtml
:END:
* (sarabander.github.io) SICP, 2e: References
:PROPERTIES:
:ID:       54ca1727-d685-4343-a0e3-3f07a815ea58
:ROAM_REFS: https://sarabander.github.io/sicp/html/References.xhtml
:END:
* (sarabander.github.io) SICP, 2e: Term Index
:PROPERTIES:
:ID:       5eac4aa2-ab1e-44ae-bfd8-498e800d9a14
:ROAM_REFS: https://sarabander.github.io/sicp/html/Term-Index.xhtml
:END:

#+begin_quote
  ** Term Index

  : Any inaccuracies in this index may be explained by the fact that it has been prepared with the help of a computer.
  :
  : ---Donald E. Knuth, Fundamental Algorithms\\
  : (Volume 1 of The Art of Computer Programming)
#+end_quote
