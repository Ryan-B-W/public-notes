:PROPERTIES:
:ID:       b436fdf8-1290-484f-becf-c369142a0b80
:END:
#+title: Essentials of Programming Languages
#+filetags: :programming_language_design:software_development:programming:computer_science:books:

* (en.wikipedia.org) Essentials of Programming Languages - Wikipedia :website:
:PROPERTIES:
:ID:       ac9ac4a4-d0a2-4119-b26f-b46b532c4b4d
:ROAM_REFS: https://en.wikipedia.org/wiki/Essentials_of_Programming_Languages
:END:

#+begin_quote
  /*Essentials of Programming Languages*/ (/*EOPL*/) is a textbook on [[https://en.wikipedia.org/wiki/Programming_language][programming languages]] by [[https://en.wikipedia.org/wiki/Daniel_P._Friedman][Daniel P. Friedman]], [[https://en.wikipedia.org/wiki/Mitchell_Wand][Mitchell Wand]], and [[https://en.wikipedia.org/w/index.php?title=Christopher_T._Haynes&action=edit&redlink=1][Christopher T. Haynes]].

  EOPL surveys the principles of programming languages from an operational perspective.  It starts with an [[https://en.wikipedia.org/wiki/Interpreter_(computing)][interpreter]] in [[https://en.wikipedia.org/wiki/Scheme_(programming_language)][Scheme]] for a simple functional core language similar to the [[https://en.wikipedia.org/wiki/Lambda_calculus][lambda calculus]] and then systematically adds constructs.  For each addition, for example, variable assignment or thread-like control, the book illustrates an increase in expressive power of the programming language and a demand for new constructs for the formulation of a direct interpreter.  The book also demonstrates that systematic transformations, say, [[https://en.wikipedia.org/wiki/Store-passing_style][store-passing style]] or [[https://en.wikipedia.org/wiki/Continuation-passing_style][continuation-passing style]], can eliminate certain constructs from the language in which the interpreter is formulated.

  The second part of the book is dedicated to a systematic translation of the interpreter(s) into [[https://en.wikipedia.org/wiki/Register_machine][register machines]].  The transformations show how to eliminate higher-order closures; continuation objects; recursive function calls; and more.  At the end, the reader is left with an "interpreter" that uses nothing but tail-recursive function calls and assignment statements plus conditionals.  It becomes trivial to translate this code into a C program or even an assembly program.  As a bonus, the book shows how to pre-compute certain pieces of "meaning" and how to generate a representation of these pre-computations.  Since this is the essence of compilation, the book also prepares the reader for a course on the principles of compilation and language translation, a related but distinct topic.  Apart from the text explaining the key concepts, the book also comprises a series of exercises, enabling the readers to explore alternative designs and other issues.

  Like [[https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs][SICP]], EOPL represents a significant departure from the prevailing textbook approach in the 1980s.  At the time, a book on the principles of programming languages presented four to six (or even more) programming languages and discussed their programming idioms and their implementation at a high level.  The most successful books typically covered [[https://en.wikipedia.org/wiki/ALGOL_60][ALGOL 60]] (and the so-called Algol family of programming languages), [[https://en.wikipedia.org/wiki/SNOBOL][SNOBOL]], [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]], and [[https://en.wikipedia.org/wiki/Prolog][Prolog]].  Even today, a fair number of textbooks on programming languages are just such surveys, though their scope has narrowed.

  EOPL was started in 1983, when Indiana was one of the leading departments in programming languages research.  Eugene Kohlbecker, one of Friedman's PhD students, transcribed and collected his "311 lectures".  Other faculty members, including Mitch Wand and Christopher Haynes, started contributing and turned "The Hitchhiker's Guide to the Meta-Universe"---as Kohlbecker had called it---into the systematic, interpreter and transformation-based survey that it is now.  Over the 25 years of its existence, the book has become a near-classic; it is now in its third edition, including additional topics such as [[https://en.wikipedia.org/wiki/Type_systems][types]] and [[https://en.wikipedia.org/wiki/Modular_programming][modules]].  Its first part now incorporates ideas on programming from [[https://en.wikipedia.org/wiki/How_to_Design_Programs][HtDP]], another unconventional textbook, which uses Scheme to teach the principles of program design.  The authors, as well as [[https://en.wikipedia.org/wiki/Matthew_Flatt][Matthew Flatt]], have recently provided [[https://en.wikipedia.org/wiki/DrRacket][DrRacket]] plug-ins and language levels for teaching with EOPL.

  EOPL has spawned at least two other related texts: Queinnec's /Lisp in Small Pieces/ and Krishnamurthi's /[[https://en.wikipedia.org/wiki/Programming_Languages:_Application_and_Interpretation][Programming Languages: Application and Interpretation]]/.
#+end_quote
* (www.goodreads.com) Essentials of Programming Languages by Daniel P. Friedman | Goodreads :website:
:PROPERTIES:
:ID:       4a3371a7-7aa4-43d2-85f6-65b25626808c
:ROAM_REFS: https://www.goodreads.com/book/show/2471645.Essentials_of_Programming_Languages
:END:

#+begin_quote
  This book provides students with a deep, working understanding of the essential concepts of programming languages.  Most of these essentials relate to the semantics, or meaning, of program elements, and the text uses interpreters (short programs that directly analyze an abstract representation of the program text) to express the semantics of many essential language elements in a way that is both clear and executable.  The approach is both analytical and hands-on.  The book provides views of programming languages using widely varying levels of abstraction, maintaining a clear connection between the high-level and low-level views.  Exercises are a vital part of the text and are scattered throughout; the text explains the key concepts, and the exercises explore alternative designs and other issues.  The complete Scheme code for all the interpreters and analyzers in the book can be found online through The MIT Press Web site.

  For this new edition, each chapter has been revised and many new exercises have been added.  Significant additions have been made to the text, including completely new chapters on modules and continuation-passing style.  /Essentials of Programming Languages/ can be used for both graduate and undergraduate courses, and for continuing education courses for programmers.
#+end_quote
* (www.amazon.com) Essentials of Programming Languages, third edition (Mit Press): 9780262062794: Computer Science Books @ Amazon.com :website:
:PROPERTIES:
:ID:       4045efac-24f4-49bd-ab46-1ba7116f0efd
:ROAM_REFS: https://www.amazon.com/dp/0262062798
:END:

#+begin_quote
  A new edition of a textbook that provides students with a deep, working understanding of the essential concepts of programming languages, completely revised, with significant new material.

  This book provides students with a deep, working understanding of the essential concepts of programming languages.  Most of these essentials relate to the semantics, or meaning, of program elements, and the text uses interpreters (short programs that directly analyze an abstract representation of the program text) to express the semantics of many essential language elements in a way that is both clear and executable.  The approach is both analytical and hands-on.  The book provides views of programming languages using widely varying levels of abstraction, maintaining a clear connection between the high-level and low-level views.  Exercises are a vital part of the text and are scattered throughout; the text explains the key concepts, and the exercises explore alternative designs and other issues.  The complete Scheme code for all the interpreters and analyzers in the book can be found online through The MIT Press web site.  For this new edition, each chapter has been revised and many new exercises have been added.  Significant additions have been made to the text, including completely new chapters on modules and continuation-passing style.  Essentials of Programming Languages can be used for both graduate and undergraduate courses, and for continuing education courses for programmers.
#+end_quote
