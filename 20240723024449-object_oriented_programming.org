:PROPERTIES:
:ID:       1a857a79-1bc3-42c2-92ee-897a864b10de
:END:
#+title: Object-Oriented Programming
#+filetags: :programming_language_design:software_development:programming_language:programming:computer_science:

Object-oriented programming (OOP) is a [[id:bbdbd1d6-ce5c-4aeb-85ea-96ab26afc28a][programming paradigm]] built around objects, constructs that combine data and code.  In particular, object have properties—sometimes called fields—that store data and have methods that contain code that act on the properties of the object and form an interface for the object.

Object-oriented programming can be further broken down into two main types: class-based where objects are instantiated from classes that have inheritance; and, prototype-based where there aren't classes but rather objects are derived from each other an inherit properties and methods at time of copying.

The first language to be designed around object-oriented programming is [[id:c00306de-35c9-4f91-9f4f-23c2462435ea][Smalltalk]] by [[id:022e5ea5-fb05-4899-981e-ca4b992dc497][Alan Kay]].
* (en.wikipedia.org) Object-oriented programming - Wikipedia        :website:
:PROPERTIES:
:ID:       c4e95502-7450-4aff-b632-08ce350acc76
:ROAM_REFS: https://en.wikipedia.org/wiki/Object-oriented_programming
:END:

#+begin_quote
  *Object-oriented programming* (*OOP*) is a [[https://en.wikipedia.org/wiki/Programming_paradigm][programming paradigm]] based on the concept of /[[https://en.wikipedia.org/wiki/Object_(computer_science)][objects]]/.  Objects can contain [[https://en.wikipedia.org/wiki/Data][data]] (called [[https://en.wikipedia.org/wiki/Field_(computer_science)][fields]], [[https://en.wikipedia.org/wiki/Attribute_(computing)][attributes]] or [[https://en.wikipedia.org/wiki/Property_(programming)][properties]]) and have actions they can perform (called [[https://en.wikipedia.org/wiki/Procedure_(computer_science)][procedures]] or [[https://en.wikipedia.org/wiki/Method_(computing)][methods]] and implemented in [[https://en.wikipedia.org/wiki/Source-code][code]]).  In OOP, [[https://en.wikipedia.org/wiki/Computer_program][computer programs]] are designed by making them out of objects that interact with one another.

  Many of the most widely used programming languages (such as [[https://en.wikipedia.org/wiki/C++][C++]], [[https://en.wikipedia.org/wiki/Java_(programming_language)][Java]], and [[https://en.wikipedia.org/wiki/Python_(programming_language)][Python]]) support object-oriented programming to a greater or lesser degree, typically as part of [[https://en.wikipedia.org/wiki/Multi-paradigm][multiple paradigms]] in combination with others such as [[https://en.wikipedia.org/wiki/Imperative_programming][imperative programming]] and [[https://en.wikipedia.org/wiki/Declarative_programming][declarative programming]].

  Significant object-oriented languages include [[https://en.wikipedia.org/wiki/Ada_(programming_language)][Ada]], [[https://en.wikipedia.org/wiki/ActionScript][ActionScript]], [[https://en.wikipedia.org/wiki/C++][C++]], [[https://en.wikipedia.org/wiki/Common_Lisp][Common Lisp]], [[https://en.wikipedia.org/wiki/C_Sharp_(programming_language)][C#]], [[https://en.wikipedia.org/wiki/Dart_(programming_language)][Dart]], [[https://en.wikipedia.org/wiki/Eiffel_(programming_language)][Eiffel]], [[https://en.wikipedia.org/wiki/Fortran][Fortran 2003]], [[https://en.wikipedia.org/wiki/Haxe][Haxe]], [[https://en.wikipedia.org/wiki/Java_(programming_language)][Java]], [[https://en.wikipedia.org/wiki/JavaScript][JavaScript]], [[https://en.wikipedia.org/wiki/Kotlin_(programming_language)][Kotlin]], [[https://en.wikipedia.org/wiki/Logo_(programming_language)][Logo]], [[https://en.wikipedia.org/wiki/MATLAB][MATLAB]], [[https://en.wikipedia.org/wiki/Objective-C][Objective-C]], [[https://en.wikipedia.org/wiki/Object_Pascal][Object Pascal]], [[https://en.wikipedia.org/wiki/Perl][Perl]], [[https://en.wikipedia.org/wiki/PHP][PHP]], [[https://en.wikipedia.org/wiki/Python_(programming_language)][Python]], [[https://en.wikipedia.org/wiki/R_(programming_language)][R]], [[https://en.wikipedia.org/wiki/Raku_(programming_language)][Raku]], [[https://en.wikipedia.org/wiki/Ruby_(programming_language)][Ruby]], [[https://en.wikipedia.org/wiki/Scala_(programming_language)][Scala]], [[https://en.wikipedia.org/wiki/SIMSCRIPT][SIMSCRIPT]], [[https://en.wikipedia.org/wiki/Simula][Simula]], [[https://en.wikipedia.org/wiki/Smalltalk][Smalltalk]], [[https://en.wikipedia.org/wiki/Swift_(programming_language)][Swift]], [[https://en.wikipedia.org/wiki/Vala_(programming_language)][Vala]] and [[https://en.wikipedia.org/wiki/Visual_Basic.NET][Visual Basic.NET]].
#+end_quote
** (en.wikipedia.org) History - Object-oriented programming - Wikipedia :website:
:PROPERTIES:
:ID:       4c84542d-5577-4d96-b59e-e18334703f56
:ROAM_REFS: https://en.wikipedia.org/wiki/Object-oriented_programming#History
:END:

#+begin_quote
  ** History

  The idea of "objects" in programming started with the [[https://en.wikipedia.org/wiki/Artificial_intelligence][artificial intelligence]] group at [[https://en.wikipedia.org/wiki/MIT][MIT]] in the late 1950s and early 1960s.  Here, "object" referred to [[https://en.wikipedia.org/wiki/LISP][LISP]] atoms with identified properties (attributes).  Another early example was [[https://en.wikipedia.org/wiki/Sketchpad][Sketchpad]] created by [[https://en.wikipedia.org/wiki/Ivan_Sutherland][Ivan Sutherland]] at MIT in 1960--1961.  In the glossary of his technical report, Sutherland defined terms like "object" and "instance" (with the class concept covered by "master" or "definition"), albeit specialized to graphical interaction.  Later, in 1968, AED-0, MIT's version of the [[https://en.wikipedia.org/wiki/ALGOL][ALGOL]] programming language, connected data structures ("plexes") and procedures, prefiguring what were later termed "messages", "methods", and "member functions".  Topics such as [[https://en.wikipedia.org/wiki/Data_abstraction][data abstraction]] and [[https://en.wikipedia.org/wiki/Modular_programming][modular programming]] were common points of discussion at this time.

  Meanwhile, in Norway, [[https://en.wikipedia.org/wiki/Simula][Simula]] was developed during the years 1961--1967.  Simula introduced essential object-oriented ideas, such as [[https://en.wikipedia.org/wiki/Class_(computer_programming)][classes]], inheritance, and [[https://en.wikipedia.org/wiki/Dynamic_binding_(computing)][dynamic binding]].  Simula was used mainly by researchers involved with [[https://en.wikipedia.org/wiki/Physical_modelling][physical modelling]], like the movement of ships and their content through cargo ports.  Simula is generally accepted as being the first language with the primary features and framework of an object-oriented language.

  #+begin_quote
  I thought of objects being like biological cells and/or individual computers on a network, only able to communicate with messages (so messaging came at the very beginning -- it took a while to see how to do messaging in a programming language efficiently enough to be useful).

  #+end_quote

  Alan Kay, 

  Influenced by both MIT and Simula, [[https://en.wikipedia.org/wiki/Alan_Kay][Alan Kay]] began developing his own ideas in November 1966.  He would go on to create [[https://en.wikipedia.org/wiki/Smalltalk][Smalltalk]], an influential object-oriented programming language.  By 1967, Kay was already using the term "object-oriented programming" in conversation.  Although sometimes called the "father" of object-oriented programming, Kay has said his ideas differ from how object-oriented programming is commonly understood, and has implied that the computer science establishment did not adopt his notion.  A 1976 MIT memo co-authored by [[https://en.wikipedia.org/wiki/Barbara_Liskov][Barbara Liskov]] lists [[https://en.wikipedia.org/wiki/Simula_67][Simula 67]], [[https://en.wikipedia.org/wiki/CLU_(programming_language)][CLU]], and [[https://en.wikipedia.org/wiki/Alphard_(programming_language)][Alphard]] as object-oriented languages, but does not mention Smalltalk.

  In the 1970s, the first version of the [[https://en.wikipedia.org/wiki/Smalltalk][Smalltalk]] programming language was developed at [[https://en.wikipedia.org/wiki/Xerox_PARC][Xerox PARC]] by [[https://en.wikipedia.org/wiki/Alan_Kay][Alan Kay]], [[https://en.wikipedia.org/wiki/Dan_Ingalls][Dan Ingalls]] and [[https://en.wikipedia.org/wiki/Adele_Goldberg_(computer_scientist)][Adele Goldberg]].  Smalltalk-72 was notable for use of objects at the language level and its graphical development environment.  Smalltalk was a fully dynamic system, allowing users to create and modify classes as they worked.  Much of the theory of OOP was developed in the context of Smalltalk, for example multiple inheritance.

  In the late 1970s and 1980s, object-oriented programming rose to prominence.  The [[https://en.wikipedia.org/wiki/Flavors_(programming_language)][Flavors]] object-oriented Lisp was developed starting 1979, introducing [[https://en.wikipedia.org/wiki/Multiple_inheritance][multiple inheritance]] and [[https://en.wikipedia.org/wiki/Mixins][mixins]].  In August 1981, [[https://en.wikipedia.org/wiki/Byte_Magazine][Byte Magazine]] highlighted Smalltalk and OOP, introducing these ideas to a wide audience.  LOOPS, the object system for [[https://en.wikipedia.org/wiki/Interlisp][Interlisp]]-D, was influenced by Smalltalk and Flavors, and a paper about it was published in 1982.  In 1986, the first /Conference on Object-Oriented Programming, Systems, Languages, and Applications/ ([[https://en.wikipedia.org/wiki/OOPSLA][OOPSLA]]) was attended by 1,000 people.  This conference marked the beginning of efforts to consolidate Lisp object systems, eventually resulting in the [[https://en.wikipedia.org/wiki/Common_Lisp_Object_System][Common Lisp Object System]].  In the 1980s, there were a few attempts to design [[https://en.wikipedia.org/wiki/Processor_design][processor architectures]] that included [[https://en.wikipedia.org/wiki/Computer_hardware][hardware]] support for objects in [[https://en.wikipedia.org/wiki/Computer_memory][memory]], but these were not successful.  Examples include the [[https://en.wikipedia.org/wiki/Intel_iAPX_432][Intel iAPX 432]] and the [[https://en.wikipedia.org/wiki/Linn_Products][Linn Smart]] [[https://en.wikipedia.org/wiki/Rekursiv][Rekursiv]].

  In the mid-1980s, new object-oriented languages like [[https://en.wikipedia.org/wiki/Objective-C][Objective-C]], [[https://en.wikipedia.org/wiki/C++][C++]], and [[https://en.wikipedia.org/wiki/Eiffel_language][Eiffel]] emerged.  Objective-C was developed by [[https://en.wikipedia.org/wiki/Brad_Cox][Brad Cox]], who had used Smalltalk at [[https://en.wikipedia.org/wiki/ITT_Inc.][ITT Inc.]].  [[https://en.wikipedia.org/wiki/Bjarne_Stroustrup][Bjarne Stroustrup]] created [[https://en.wikipedia.org/wiki/C++][C++]] based on his experience using Simula for his PhD thesis.  [[https://en.wikipedia.org/wiki/Bertrand_Meyer][Bertrand Meyer]] produced the first design of the [[https://en.wikipedia.org/wiki/Eiffel_language][Eiffel language]] in 1985, which focused on software quality using a [[https://en.wikipedia.org/wiki/Design_by_contract][design by contract]] approach.

  In the 1990s, object-oriented programming became the main way of programming, especially as more languages supported it.  These included [[https://en.wikipedia.org/wiki/Visual_FoxPro][Visual FoxPro]] 3.0, [[https://en.wikipedia.org/wiki/C++][C++]], and [[https://en.wikipedia.org/wiki/Delphi_(programming_language)][Delphi]].  OOP became even more popular with the rise of [[https://en.wikipedia.org/wiki/Graphical_user_interface][graphical user interfaces]], which used objects for buttons, menus and other elements.  One well-known example is Apple's [[https://en.wikipedia.org/wiki/Cocoa_(software)][Cocoa]] framework, used on [[https://en.wikipedia.org/wiki/Mac_OS_X][Mac OS X]] and written in [[https://en.wikipedia.org/wiki/Objective-C][Objective-C]].  OOP toolkits also enhanced the popularity of [[https://en.wikipedia.org/wiki/Event-driven_programming][event-driven programming]].

  At [[https://en.wikipedia.org/wiki/ETH_Zürich][ETH Zürich]], [[https://en.wikipedia.org/wiki/Niklaus_Wirth][Niklaus Wirth]] and his colleagues created new approaches to OOP.  [[https://en.wikipedia.org/wiki/Modula-2][Modula-2]] (1978) and [[https://en.wikipedia.org/wiki/Oberon_(programming_language)][Oberon]] (1987), included a distinctive approach to object orientation, classes, and type checking across module boundaries.  Inheritance is not obvious in Wirth's design since his nomenclature looks in the opposite direction: It is called type extension and the viewpoint is from the parent down to the inheritor.

  Many programming languages that existed before OOP have added object-oriented features, including [[https://en.wikipedia.org/wiki/Ada_(programming_language)][Ada]], [[https://en.wikipedia.org/wiki/BASIC][BASIC]], [[https://en.wikipedia.org/wiki/Fortran][Fortran]], [[https://en.wikipedia.org/wiki/Pascal_(programming_language)][Pascal]], and [[https://en.wikipedia.org/wiki/COBOL][COBOL]].  This sometimes caused compatibility and maintainability issues, as these languages were not originally designed with OOP in mind.

  In the new millenium, new languages like [[https://en.wikipedia.org/wiki/Python_(programming_language)][Python]] and [[https://en.wikipedia.org/wiki/Ruby_programming_language][Ruby]] have emerged that combine object-oriented and procedural styles.  The most commercially important "pure" object-oriented languages continue to be [[https://en.wikipedia.org/wiki/Java_(programming_language)][Java]], developed by [[https://en.wikipedia.org/wiki/Sun_Microsystems][Sun Microsystems]], as well as [[https://en.wikipedia.org/wiki/C_Sharp_(programming_language)][C#]] and [[https://en.wikipedia.org/wiki/Visual_Basic.NET][Visual Basic.NET]] (VB.NET), both designed for Microsoft's [[https://en.wikipedia.org/wiki/.NET_Framework][.NET]] platform.  These languages show the benefits of OOP by creating abstractions from implementation.  The .NET platform supports cross-language inheritance, allowing programs to use objects from multiple languages together.
#+end_quote
