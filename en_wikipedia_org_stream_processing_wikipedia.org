:PROPERTIES:
:ID:       6ef1ac14-28b3-4eb3-b97d-eeb96177be43
:ROAM_REFS: https://en.wikipedia.org/wiki/Stream_processing
:END:
#+title: (en.wikipedia.org) Stream processing - Wikipedia
#+filetags: :website:

#+begin_quote
  In [[https://en.wikipedia.org/wiki/Computer_science][computer science]], *stream processing* (also known as *event stream processing*, *data stream processing*, or *distributed stream processing*) is a [[https://en.wikipedia.org/wiki/Programming_paradigm][programming paradigm]] which views [[https://en.wikipedia.org/wiki/Stream_(computing)][streams]], or sequences of events in time, as the central input and output objects of [[https://en.wikipedia.org/wiki/Computation][computation]].  Stream processing encompasses [[https://en.wikipedia.org/wiki/Dataflow_programming][dataflow programming]], [[https://en.wikipedia.org/wiki/Reactive_programming][reactive programming]], and [[https://en.wikipedia.org/wiki/Distributed_computing][distributed]] [[https://en.wikipedia.org/wiki/Data_processing][data processing]].  Stream processing systems aim to expose [[https://en.wikipedia.org/wiki/Parallel_computing][parallel processing]] for data streams and rely on [[https://en.wikipedia.org/wiki/Streaming_algorithm][streaming algorithms]] for efficient implementation.  The [[https://en.wikipedia.org/wiki/Solution_stack][software stack]] for these systems includes components such as [[https://en.wikipedia.org/wiki/Programming_model][programming models]] and [[https://en.wikipedia.org/wiki/Query_language][query languages]], for expressing computation; [[https://en.wikipedia.org/wiki/Data_stream_management_system][stream management systems]], for distribution and [[https://en.wikipedia.org/wiki/Scheduling_(computing)][scheduling]]; and hardware components for [[https://en.wikipedia.org/wiki/Hardware_acceleration][acceleration]] including [[https://en.wikipedia.org/wiki/Floating-point_unit][floating-point units]], [[https://en.wikipedia.org/wiki/Graphics_processing_unit][graphics processing units]], and [[https://en.wikipedia.org/wiki/Field-programmable_gate_array][field-programmable gate arrays]].

  The stream processing paradigm simplifies parallel software and hardware by restricting the parallel computation that can be performed.  Given a sequence of data (a /stream/), a series of operations (/[[https://en.wikipedia.org/wiki/Compute_kernel][kernel functions]]/) is applied to each element in the stream.  Kernel functions are usually [[https://en.wikipedia.org/wiki/Pipeline_(computing)][pipelined]], and optimal local on-chip memory reuse is attempted, in order to minimize the loss in bandwidth, associated with external memory interaction.  /Uniform streaming/, where one kernel function is applied to all elements in the stream, is typical.  Since the kernel and stream abstractions expose data dependencies, compiler tools can fully automate and optimize on-chip management tasks.  Stream processing hardware can use [[https://en.wikipedia.org/wiki/Scoreboarding][scoreboarding]], for example, to initiate a [[https://en.wikipedia.org/wiki/Direct_memory_access][direct memory access]] (DMA) when dependencies become known.  The elimination of manual DMA management reduces software complexity, and an associated elimination for hardware cached I/O, reduces the data area expanse that has to be involved with service by specialized computational units such as [[https://en.wikipedia.org/wiki/Arithmetic_logic_unit][arithmetic logic units]].

  During the 1980s stream processing was explored within [[https://en.wikipedia.org/wiki/Dataflow_programming][dataflow programming]].  An example is the language [[https://en.wikipedia.org/wiki/SISAL][SISAL]] (Streams and Iteration in a Single Assignment Language).
#+end_quote
