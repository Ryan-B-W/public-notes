:PROPERTIES:
:ID:       8f2f9c86-3c10-4f5d-a6c7-965560e307b1
:ROAM_REFS: https://dl.acm.org/doi/10.1145/361604.361612
:END:
#+title: (dl.acm.org) Computer programming as an art | Communications of the ACM
#+filetags: :software_optimization:programming:science_paper:software_development:computer_science:formal_speech:article:website:

#+begin_quote
  ** Abstract

  When /Communications of the ACM/ began publication in 1959, the members of ACM's Editorial Board made the following remark as they described the purposes of ACM's periodicals [2]: “If computer programming is to become an important part of computer research and development, a transition of programming from an art to a disciplined science must be effected.”  Such a goal has been a continually recurring theme during the ensuing years; for example, we read in 1970 of the “first steps toward transforming the art of programming into a science” [26].  Meanwhile we have actually succeeded in making our discipline a science, and in a remarkably simple way: merely by deciding to call it “computer science.”
#+end_quote
* (dl.acm.org) Computer Programming as an Art [pdf] :mime_type_application_pdf:essay:computer_science:website:
:PROPERTIES:
:ID:       270a05e7-8d9e-45fe-815a-084be9578373
:ROAM_REFS: https://dl.acm.org/doi/pdf/10.1145/361604.361612
:END:

First paragraph from the introduction:
#+begin_quote
  When Communications of the ACM began publication in 1959, the members of ACM'S Editorial Board made the following remark as they described the purposes of ACM's periodicals: "If computer programming is to become an important part of computer research and development, a transition of programming from an art to a disciplined science must be effected."  Such a goal has been a continually recurring theme during the ensuing years; for example, we read in 1970 of the "first steps toward transforming the art of programming into a science".  Meanwhile we have actually succeeded in making our discipline a science, and in a remarkably simple way: merely by deciding to call it "computer science."
#+end_quote

The famous quote of [[id:98408d03-2cf9-4897-905d-02781a1b8a6b][Donald Knuth]] "…premature optimization is the root of all evil…" is almost always taken out of context.  The full form of the quote below is delightfully nuanced.
#+begin_quote
  Another important aspect of program quality is the efficiency with which the computer's resources are actually being used.  I am sorry to say that many people nowadays are condemning program efficiency, telling us that it is in bad taste.  The reason for this is that we are now experiencing a reaction from the time when efficiency was the only reputable criterion of goodness, and programmers in the past have tended to be so preoccupied with efficiency that they have produced needlessly complicated code; the result of this unnecessary complexity has been that net efficiency has gone down, due to difficulties of debugging and maintenance.

  The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.

  We shouldn't be penny wise and pound foolish, nor should we always think of efficiency in terms of so many percent gained or lost in total running time or space.  When we buy a car, many of us are almost oblivious to a difference of $50 or $100 in its price, while we might make a special trip to a particular store in order to buy a 50¢ item for only 25¢.  My point is that there is a time and place for efficiency; I have discussed its proper role in my paper on structured programming, which appears in the current issue of Computing Surveys.
#+end_quote
