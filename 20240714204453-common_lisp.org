:PROPERTIES:
:ID:       b5fb5c4b-d10f-4bca-91e1-a5e946ef0c83
:END:
#+title: Common Lisp
#+filetags: :programming_language:common_lisp:lisp:

A [[id:84ae6e85-a6a2-4133-bc53-274238081c2d][Lisp]] [[id:b24601aa-09df-41e1-aa7e-25ead342db34][programming language]] dialect standardized by [[https://www.ansi.org/][ANSI]] in 1994 after initially being developed in 1984.
* (en.wikipedia.org) Common Lisp - Wikipedia                        :website:
:PROPERTIES:
:ID:       387ca036-fcfd-4ef3-99dd-9d3515641b6d
:ROAM_REFS: https://en.wikipedia.org/wiki/Common_Lisp#Libraries
:END:

#+begin_quote
  *Common Lisp* (*CL*) is a dialect of the [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp programming language]], published in [[https://en.wikipedia.org/wiki/American_National_Standards_Institute][American National Standards Institute]] (ANSI) standard document /ANSI INCITS 226-1994 (S2018)/ (formerly /X3.226-1994 (R1999)/).  The [[https://en.wikipedia.org/wiki/Common_Lisp_HyperSpec][Common Lisp HyperSpec]], a [[https://en.wikipedia.org/wiki/Hyperlink][hyperlinked]] [[https://en.wikipedia.org/wiki/HTML][HTML]] version, has been derived from the ANSI Common Lisp standard.

  The Common Lisp language was developed as a standardized and improved successor of [[https://en.wikipedia.org/wiki/Maclisp][Maclisp]].  By the early 1980s several groups were already at work on diverse successors to MacLisp: [[https://en.wikipedia.org/wiki/Lisp_Machine_Lisp][Lisp Machine Lisp]] (aka ZetaLisp), [[https://en.wikipedia.org/wiki/Spice_Lisp][Spice Lisp]], [[https://en.wikipedia.org/wiki/NIL_(programming_language)][NIL]] and [[https://en.wikipedia.org/wiki/S-1_Lisp][S-1 Lisp]].  Common Lisp sought to unify, standardise, and extend the features of these MacLisp dialects.  Common Lisp is not an implementation, but rather a language [[https://en.wikipedia.org/wiki/Specification][specification]].  Several [[https://en.wikipedia.org/wiki/Common_Lisp#Implementations][implementations]] of the Common Lisp standard are available, including [[https://en.wikipedia.org/wiki/Free_and_open-source_software][free and open-source software]] and proprietary products.  Common Lisp is a general-purpose, [[https://en.wikipedia.org/wiki/Multi-paradigm_programming_language][multi-paradigm programming language]].  It supports a combination of [[https://en.wikipedia.org/wiki/Procedural_programming][procedural]], [[https://en.wikipedia.org/wiki/Functional_programming][functional]], and [[https://en.wikipedia.org/wiki/Object-oriented_programming][object-oriented programming]] paradigms.  As a [[https://en.wikipedia.org/wiki/Dynamic_programming_language][dynamic programming language]], it facilitates evolutionary and [[https://en.wikipedia.org/wiki/Iterative_and_incremental_development][incremental software development]], with iterative [[https://en.wikipedia.org/wiki/Compiler][compilation]] into efficient run-time programs.  This incremental development is often done interactively without interrupting the running application.

  It also supports optional type annotation and casting, which can be added as necessary at the later [[https://en.wikipedia.org/wiki/Profiling_(computer_programming)][profiling]] and optimization stages, to permit the compiler to generate more efficient code.  For instance, =fixnum= can hold an [[https://en.wikipedia.org/wiki/Boxing_(computer_science)][unboxed]] integer in a range supported by the hardware and implementation, permitting more efficient arithmetic than on big integers or arbitrary precision types.  Similarly, the compiler can be told on a per-module or per-function basis which type of safety level is wanted, using /optimize/ declarations.

  Common Lisp includes [[https://en.wikipedia.org/wiki/Common_Lisp_Object_System][CLOS]], an [[https://en.wikipedia.org/wiki/Object_system][object system]] that supports [[https://en.wikipedia.org/wiki/Multimethods][multimethods]] and method combinations.  It is often implemented with a [[https://en.wikipedia.org/wiki/Metaobject][Metaobject]] Protocol.

  Common Lisp is extensible through standard features such as /Lisp [[https://en.wikipedia.org/wiki/Macro_(computer_science)][macros]]/ (code transformations) and /reader macros/ (input parsers for characters).

  Common Lisp provides partial backwards compatibility with [[https://en.wikipedia.org/wiki/Maclisp][Maclisp]] and John McCarthy's original [[https://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp]].  This allows older Lisp software to be ported to Common Lisp.
#+end_quote
