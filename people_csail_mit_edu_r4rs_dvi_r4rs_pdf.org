:PROPERTIES:
:ID:       2d8eab8d-7a9d-4f25-be0c-43dc3cd26cdb
:ROAM_REFS: https://people.csail.mit.edu/jaffer/r4rs.pdf
:END:
#+title: (people.csail.mit.edu) r4rs.dvi - r4rs.pdf
#+filetags: :scheme:lisp:computer_science:documentation:specification:mime_type_application_pdf:website:

#+begin_quote
  * Revised^4 Report on the Algorithmic Language Scheme

  William Clinger and Jonathan Rees (Editors), H. Abelson, R. K. Dybvig, C. T. Haynes, G. J. Rozas, N. I. Adams IV, D. P. Friedman, E. Kohlbecker, G. L. Steele Jr., D. H. Bartley, R. Halstead, D. Oxley, G. J. Sussman, G. Brooks, C. Hanson, K. M. Pitman, M. Wand

  Dedicated to the Memory of ALGOL 60

  2 November 1991

  ** SUMMARY

  The report gives a defining description of the programming language Scheme.  Scheme is a statically scoped and properly tail-recursive dialect of the Lisp programming language invented by Guy Lewis Steele Jr. and Gerald Jay Sussman.  It was designed to have an exceptionally clear and simple semantics and few different ways to form expressions.  A wide variety of programming paradigms, including imperative, functional, and message passing styles, find convenient expression in Scheme.  The introduction offers a brief history of the language and of the report.  The first three chapters present the fundamental ideas of the language and describe the notational conventions used for describing the language and for writing programs in the language.  Chapters 4 and 5 describe the syntax and semantics of expressions, programs, and definitions.  Chapter 6 describes Scheme's built-in procedures, which include all of the language's data manipulation and input/output primitives.  Chapter 7 provides a formal syntax for Scheme written in extended BNF, along with a formal denotational semantics.  An example of the use of the language follows the formal syntax and semantics.  The appendix describes a macro facility that may be used to extend the syntax of Scheme.  The report concludes with a bibliography and an alphabetic index.
#+end_quote
